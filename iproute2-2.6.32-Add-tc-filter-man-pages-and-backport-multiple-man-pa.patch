From 320ab61d36ae34026184ac12a5a05323b3924a35 Mon Sep 17 00:00:00 2001
From: Phil Sutter <psutter@redhat.com>
Date: Tue, 3 Nov 2015 00:07:59 +0100
Subject: [PATCH] Add tc filter man pages and backport multiple man page
 improvements
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1093726

This is a combination of 20 commits:

commit 5080db330ec15be7a1892f49949effd807a996fe
Author: Florian Westphal <fw@strlen.de>
Date:   Mon Jan 18 23:54:02 2010 +0100

    tc: man: add man page for drr scheduler

    With help from Patrick McHardy.

    Signed-off-by: Florian Westphal <fw@strlen.de>

commit d18086ccdee104172ae542013e370ca199b52c18
Author: Bjarni Ingi Gislason <bjarniig@rhi.hi.is>
Date:   Mon May 28 13:46:05 2012 +0200

    tc-drr(8): tab unquoted in a argument to a macro

    <groff: tc-drr.8>:67: warning: tab character in unquoted macro argument
    <groff: tc-drr.8>:69: warning: tab character in unquoted macro argument

    *********************

    Originally filed at: http://bugs.debian.org/674706

    Signed-off-by: Andreas Henriksson <andreas@fatal.se>

commit c487348a9c009260b9b1d2f8530873e9bda7d9b5
Author: Florian Westphal <fw@strlen.de>
Date:   Thu Aug 9 09:18:51 2012 +0000

    add ematch man page

commit c7f04f021c50286e342d29fa362c873c54b42ea3
Author: Stephen Hemminger <shemminger@vyatta.com>
Date:   Fri Aug 17 15:28:59 2012 -0700

    Fix formatting of ip.8 family man page

    fix bad formatting in description of -f option

commit d89fbf3223ec6909835a28bdab6880158e18354b
Author: Stephen Hemminger <shemminger@vyatta.com>
Date:   Mon Aug 20 10:58:58 2012 -0700

    Explain TC class id limits

commit 1b3c149b4101a985ef6bcb4dd1774c1408c8f30f
Author: Andreas Schwab <schwab@linux-m68k.org>
Date:   Thu Sep 6 03:09:58 2012 +0000

    iproute2: Fix various manpage formatting nits

    Signed-off-by: Andreas Schwab <schwab@linux-m68k.org>

commit caadda9308dad90d52fb38fa8ab68f330cefc54c
Author: Andreas Henriksson <andreas@fatal.se>
Date:   Wed Dec 12 12:23:48 2012 +0100

    iproute2: fix tc ematch manpage section

    The debian package checking tool, lintian, spotted that the
    tc ematch manpage seems to have an error in the specified section.

    Signed-off-by: Andreas Henriksson <andreas@fatal.se>

commit 49572501664d08262b0b79e118126b1cf6b15fc2
Author: Kees van Reeuwijk <reeuwijk@few.vu.nl>
Date:   Fri Feb 8 03:32:36 2013 +0000

    iproute2: clarification of various man8 pages

    Rephrasing for clarity.

    Note that in ip-rule.8 I rephrased a sentence to "The RPDB is scanned
    in order of decreasing priority." The original version talked about
    *in*creasing priority, but from the context that didn't make sense.

    Signed-off-by: Kees van Reeuwijk <reeuwijk@few.vu.nl>

commit 6274b0b759949d42476d99c117fa1833a425f12b
Author: Petr Sabata <contyk@redhat.com>
Date:   Thu Apr 4 03:36:57 2013 +0000

    iproute2: Fix some manpage typos

    This patch fixes some of the typos found in iproute2
    documentation.

    Signed-off-by: Petr Šabata <contyk@redhat.com>

commit ee0b0a9ec9ab7ce29e2c4d1fa7ce411f9b5ef8cb
Author: esr@thyrsus.com <esr@thyrsus.com>
Date:   Tue Jul 9 20:13:06 2013 -0400

    In tc-ematch.8, remove no-op .ti requests to prevent translation warnings

    These do nothing on an 80-column display. They were clearly somebody's
    boilerplate way of setting up hanging indents, but the syntax lines
    are way too short to require them. And since most were argumentless
    they would have been no-ops on any sized display.

commit a89d5329d414c601c220505c5173afecb4438dba
Author: Pavel Šimerda <psimerda@redhat.com>
Date:   Tue Apr 7 08:41:36 2015 -0700

    docs: make spacing consistent

    Result of the following command:

        sed -ri 's/\.  /. /g' man/*/*

    Signed-Off-By: Pavel Šimerda <psimerda@redhat.com>

commit 0a83e1eaf7b3c2ed9e6d809bd7aac7946f9d8d87
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:21:17 2015 +0200

    tc: improve filter help texts a bit

    This fixes a few syntax errors and changes route filter help text to use
    classid instead of flowid to be consistent with other filters' help
    texts.

    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit 55b35567ad05d926c1a73828cef2d4370d928b54
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:08 2015 +0200

    tc: add a man page for basic filter

    Cc: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit 5774f09ee8c6d36c34986bacea423b5b4dd1cb48
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:09 2015 +0200

    tc: add a man page for cgroup filter

    Cc: Thomas Graf <tgraf@suug.ch>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit 334ddc9b4d526d0fe4487464c1c4e0c0fcb35a30
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:10 2015 +0200

    tc: add a man page for flow filter

    Cc: Patrick McHardy <kaber@trash.net>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit 49891ba177283d3bece364c50e7c9909e2b733b5
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:12 2015 +0200

    tc: add a man page for fw filter

    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit 02dddd6110309ac37e72c418cfd96684dc763f3e
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:13 2015 +0200

    tc: add a man page for route filter

    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit fc7a72f1ebcd8eeba8788a68f83b0454a1bc7730
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:14 2015 +0200

    tc: add a man page for tcindex filter

    Cc: Werner Almesberger <werner@almesberger.net>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit f15a23966fff35e484812ec1d733d9438f658644
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:15 2015 +0200

    tc: add a man page for u32 filter

    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit a257bc7b4c481d4b2871508edfccc198d1e56c8a
Author: Phil Sutter <phil@nwl.cc>
Date:   Fri Oct 23 19:47:16 2015 +0200

    tc: ship filter man pages and refer to them in tc.8

    Cc: Thomas Graf <tgraf@suug.ch>
    Cc: Alexey Kuznetsov <kuznet@ms2.inr.ac.ru>
    Cc: Jiri Pirko <jiri@resnulli.us>
    Cc: Patrick McHardy <kaber@trash.net>
    Cc: Werner Almesberger <werner@almesberger.net>
    Signed-off-by: Phil Sutter <phil@nwl.cc>

Signed-off-by: Phil Sutter <psutter@redhat.com>
---
 man/man8/arpd.8           |  36 +--
 man/man8/bridge.8         |  52 ++--
 man/man8/ip.8             | 235 ++++++++--------
 man/man8/rtmon.8          |   2 +-
 man/man8/ss.8             |   2 +-
 man/man8/tc-basic.8       |  34 +++
 man/man8/tc-cbq-details.8 |   6 +-
 man/man8/tc-cbq.8         |   6 +-
 man/man8/tc-cgroup.8      |  80 ++++++
 man/man8/tc-drr.8         |  94 +++++++
 man/man8/tc-ematch.8      | 132 +++++++++
 man/man8/tc-flow.8        | 265 ++++++++++++++++++
 man/man8/tc-fw.8          |  66 +++++
 man/man8/tc-red.8         |   4 +-
 man/man8/tc-route.8       |  74 ++++++
 man/man8/tc-tbf.8         |  52 ++--
 man/man8/tc-tcindex.8     |  58 ++++
 man/man8/tc-u32.8         | 663 ++++++++++++++++++++++++++++++++++++++++++++++
 man/man8/tc.8             |  76 +++++-
 tc/f_route.c              |   2 +-
 tc/f_rsvp.c               |   2 +-
 21 files changed, 1730 insertions(+), 211 deletions(-)
 create mode 100644 man/man8/tc-basic.8
 create mode 100644 man/man8/tc-cgroup.8
 create mode 100644 man/man8/tc-drr.8
 create mode 100644 man/man8/tc-ematch.8
 create mode 100644 man/man8/tc-flow.8
 create mode 100644 man/man8/tc-fw.8
 create mode 100644 man/man8/tc-route.8
 create mode 100644 man/man8/tc-tcindex.8
 create mode 100644 man/man8/tc-u32.8

diff --git a/man/man8/arpd.8 b/man/man8/arpd.8
index 7a0524f..694ae9d 100644
--- a/man/man8/arpd.8
+++ b/man/man8/arpd.8
@@ -4,12 +4,12 @@
 arpd \- userspace arp daemon.
 
 .SH SYNOPSIS
-Usage: arpd [ -lkh? ] [ -a N ] [ -b dbase ] [-B number] [ -f file ] [-n time] [-R rate] [ interfaces ]
+Usage: arpd [ -lkh? ] [ -a N ] [ -b dbase ] [ -B number ] [ -f file ] [ -n time ] [ -R rate ] [ <INTERFACES> ]
 
 .SH DESCRIPTION
 The
 .B arpd
-daemon collects gratuitous ARP information, saving it on local disk and feeding it to kernel on demand to avoid redundant broadcasting due to limited size of kernel ARP cache.
+daemon collects gratuitous ARP information, saving it on local disk and feeding it to the kernel on demand to avoid redundant broadcasting due to limited size of the kernel ARP cache.
 
 .SH OPTIONS
 .TP
@@ -17,38 +17,38 @@ daemon collects gratuitous ARP information, saving it on local disk and feeding
 Print help
 .TP
 -l
-Dump arpd database to stdout and exit. Output consists of three columns: interface index, IP address and MAC address. Negative entries for dead hosts are also shown, in this case MAC address is replaced by word FAILED followed by colon and time when the fact that host is dead was proven the last time.
+Dump the arpd database to stdout and exit. The output consists of three columns: the interface index, the IP address of the interface, and the MAC address of the interface. Negative entries for dead hosts are also shown, in this case the MAC address is replaced by the word FAILED followed by a colon and the most recent time when the fact that the host is dead was proven.
 .TP
 -f <FILE>
-Read and load arpd database from FILE in text format similar dumped by option -l. Exit after load, probably listing resulting database, if option -l is also given. If FILE is -, stdin is read to get ARP table.
+Read and load an arpd database from FILE in a text format similar to that dumped by option -l. Exit after load, possibly listing resulting database, if option -l is also given. If FILE is -, stdin is read to get the ARP table.
 .TP
 -b <DATABASE>
-location of database file. Default location is /var/lib/arpd/arpd.db
+the location of the database file. The default location is /var/lib/arpd/arpd.db
 .TP
 -a <NUMBER>
-arpd not only passively listens ARP on wire, but also send brodcast queries itself. NUMBER is number of such queries to make before destination is considered as dead. When arpd is started as kernel helper (i.e. with app_solicit enabled in sysctl or even with option -k) without this option and still did not learn enough information, you can observe 1 second gaps in service. Not fatal, but not good.
+With this option, arpd not only passively listens for ARP packets on the interface, but also sends broadcast queries itself. NUMBER is the number of such queries to make before a destination is considered dead. When arpd is started as kernel helper (i.e. with app_solicit enabled in sysctl or even with option -k) without this option and still did not learn enough information, you can observe 1 second gaps in service. Not fatal, but not good.
 .TP
 -k
-Suppress sending broadcast queries by kernel. It takes sense together with option -a.
+Suppress sending broadcast queries by the kernel. This option only makes sense together with option -a.
 .TP
 -n <TIME>
-Timeout of negative cache. When resolution fails arpd suppresses further attempts to resolve for this period. It makes sense only together with option -k This timeout should not be too much longer than boot time of a typical host not supporting gratuitous ARP. Default value is 60 seconds.
+Specifies the timeout of the negative cache. When resolution fails, arpd suppresses further attempts to resolve for this period. This option only makes sense together with option '-k'. This timeout should not be too much longer than the boot time of a typical host not supporting gratuitous ARP. Default value is 60 seconds.
 .TP
 -R <RATE>
 Maximal steady rate of broadcasts sent by arpd in packets per second. Default value is 1.
 .TP
 -B <NUMBER>
-Number of broadcasts sent by <tt/arpd/ back to back. Default value is 3. Together with option <tt/-R/ this option allows to police broadcasting not to exceed B+R*T over any interval of time T.
+The number of broadcasts sent by arpd back to back. Default value is 3. Together with the -R option, this option ensures that the number of ARP queries that are broadcast does not exceed B+R*T over any interval of time T.
 .P
-<INTERFACE> is the name of networking interface to watch. If no interfaces given, arpd monitors all the interfaces. In this case arpd does not adjust sysctl parameters, it is supposed user does this himself after arpd is started.
+<INTERFACES> is a list of names of networking interfaces to watch. If no interfaces are given, arpd monitors all the interfaces. In this case arpd does not adjust sysctl parameters, it is assumed that the user does this himself after arpd is started.
 .P
-Signals
-.br
-arpd exits gracefully syncing database and restoring adjusted sysctl parameters, when receives SIGINT or SIGTERM. SIGHUP syncs database to disk. SIGUSR1 sends some statistics to syslog. Effect of another signals is undefined, they may corrupt database and leave sysctl praameters in an unpredictable state.
+.SH SIGNALS
+.TP
+When arpd receives a SIGINT or SIGTERM signal, it exits gracefully, syncing the database and restoring adjusted sysctl parameters. On a SIGHUP it syncs the database to disk. With SIGUSR1 it sends some statistics to syslog. The effect of any other signals is undefined. In particular, they may corrupt the database and leave the sysctl parameters in an unpredictable state.
 .P
-Note
-.br
-In order for arpd to be able to serve as ARP resolver, kernel must be compiled with the option CONFIG_ARPD and, in the case when interface list in not given on command line, variable app_solicit on interfaces of interest should be in /proc/sys/net/ipv4/neigh/*. If this is not made arpd still collects gratuitous ARP information in its database.
+.SH NOTE
+.TP
+In order for arpd to be able to serve as ARP resolver, the kernel must be compiled with the option CONFIG_ARPD and, in the case when interface list in not given on command line, variable app_solicit on interfaces of interest should be in /proc/sys/net/ipv4/neigh/*. If this is not made arpd still collects gratuitous ARP information in its database.
 .SH EXAMPLES
 .TP
 arpd -b /var/tmp/arpd.db
@@ -61,6 +61,6 @@ arpd -b /var/tmp/arpd.db -a 1 eth0 eth1
 Enable kernel helper, leaving leading role to kernel.
 .TP
 arpd -b /var/tmp/arpd.db -a 3 -k eth0 eth1
-Completely replace kernel resolution on interfaces eth0 and eth1. In this case kernel still does unicast probing to validate entries, but all the broadcast activity is suppressed and made under authority of arpd.
+Completely replace kernel resolution on interfaces eth0 and eth1. In this case the kernel still does unicast probing to validate entries, but all the broadcast activity is suppressed and made under authority of arpd.
 .PP
-This is mode which arpd is supposed to work normally. It is not default just to prevent occasional enabling of too aggressive mode occasionally.
+This is the mode in which arpd normally is supposed to work. It is not the default to prevent occasional enabling of too aggressive a mode.
diff --git a/man/man8/bridge.8 b/man/man8/bridge.8
index 927a492..c727c06 100644
--- a/man/man8/bridge.8
+++ b/man/man8/bridge.8
@@ -106,7 +106,7 @@ utility and exit.
 
 .TP
 .BR "\-s" , " \-stats", " \-statistics"
-output more information.  If this option
+output more information. If this option
 is given multiple times, the amount of information increases.
 As a rule, the information is statistics or some time values.
 
@@ -144,9 +144,9 @@ and
 (or
 .B list
 ) objects, but some objects do not allow all of these operations
-or have some additional commands.  The
+or have some additional commands. The
 .B help
-command is available for all objects.  It prints
+command is available for all objects. It prints
 out a list of available commands and argument syntax conventions.
 .sp
 If no command is given, some default command is assumed.
@@ -176,67 +176,67 @@ the STP path cost of the specified port.
 
 .TP
 .BI priority " PRIO "
-the STP port priority.  The priority value is an unsigned 8-bit quantity
-(number between 0 and 255).  This metric is used in the designated port an
+the STP port priority. The priority value is an unsigned 8-bit quantity
+(number between 0 and 255). This metric is used in the designated port an
 droot port selectio algorithms.
 
 .TP
 .BI state " STATE "
-the operation state of the port.  This is primarily used by user space STP/RSTP
-implementation.  The following is a list of valid values:
+the operation state of the port. This is primarily used by user space STP/RSTP
+implementation. The following is a list of valid values:
 
 .B 0
-- port is DISABLED.  Make this port completely inactive.
+- port is DISABLED. Make this port completely inactive.
 .sp
 
 .B 1
-- STP LISTENING state.  Only valid if STP is enabled on the brige.  In this
+- STP LISTENING state. Only valid if STP is enabled on the brige. In this
 state the port for list for STP BPDUs and drop all other traffic.
 .sp
 
 .B 2
-- STP LEARNING state.  Only valid if STP is enabled on the bridge.  In this
+- STP LEARNING state. Only valid if STP is enabled on the bridge. In this
 state the port will accept traffic only for the purpose of updating MAC
 adress tables.
 .sp
 
 .B 3
-- STP FORWARDING state.  Port is fully active.
+- STP FORWARDING state. Port is fully active.
 .sp
 
 .B 4
-- STP BLOCKING state.  Only valid if STP is enabled on the bridge.  This state
-is used during the STP election process.  In this state, port will only process
+- STP BLOCKING state. Only valid if STP is enabled on the bridge. This state
+is used during the STP election process. In this state, port will only process
 STP BPDUs.
 .sp
 
 .TP
 .BR "guard on " or " guard off "
-Controls whether STP BPUDs will be processed by the bridge port.  By default,
-the flag is turned off allowed BPDU processing.  Turning this flag on will
+Controls whether STP BPUDs will be processed by the bridge port. By default,
+the flag is turned off allowed BPDU processing. Turning this flag on will
 cause the port to stop processing STP BPDUs.
 
 .TP
 .BR "hairpin on " or " hairpin off "
 Controls whether traffic may be send back out of the port on which it was
-received.  By default, this flag is turned off and the bridge will not forward
+received. By default, this flag is turned off and the bridge will not forward
 traffic back out of the receiving port.
 
 .TP
 .BR "fastleave on " or " fastleave off "
 This flag allows the bridge to immediately stop multicast traffic on a port
-that receives IGMP Leave message.  It is only used with IGMP snooping is
-enabled on the bridge.  By default the flag is off.
+that receives IGMP Leave message. It is only used with IGMP snooping is
+enabled on the bridge. By default the flag is off.
 
 .TP
 .BR "root_block on " or " root_block off "
-Controls whether a given port is allowed to become root port or not.  Only used
-when STP is enabled on the bridge.  By default the flag is off.
+Controls whether a given port is allowed to become root port or not. Only used
+when STP is enabled on the bridge. By default the flag is off.
 
 .TP
 .BI hwmode
 Some network interface cards support HW bridge functionality and they may be
-configured in different modes.  Currently support modes are:
+configured in different modes. Currently support modes are:
 
 .B vepa
 - Data sent between HW ports is sent on the wire to the external
@@ -345,7 +345,7 @@ This command displays the current forwarding table.
 .PP
 With the
 .B -statistics
-option, the command becomes verbose.  It prints out the last updated
+option, the command becomes verbose. It prints out the last updated
 and last used time for each entry.
 
 .SH bridge mdb - multicast group database management
@@ -408,7 +408,7 @@ bridge interfaces.
 .PP
 With the
 .B -details
-option, the command becomes verbose.  It prints out the ports known to have
+option, the command becomes verbose. It prints out the ports known to have
 a connected router.
 
 .SH bridge vlan - VLAN filter list
@@ -443,7 +443,7 @@ the vlan specified is to be treated as untagged on egress.
 
 .TP
 .BI self
-the vlan is configured on the specified physical device.  Required if the
+the vlan is configured on the specified physical device. Required if the
 device is the bridge device.
 
 .TP
@@ -469,7 +469,7 @@ This command displays the current VLAN filter table.
 The
 .B bridge
 utility can monitor the state of devices and  addresses
-continuously.  This option has a slightly different format.
+continuously. This option has a slightly different format.
 Namely, the
 .B monitor
 command is the first in the command line and then the object list follows:
@@ -491,7 +491,7 @@ described in previous sections.
 .P
 If a file name is given, it does not listen on RTNETLINK,
 but opens the file containing RTNETLINK messages saved in binary format
-and dumps them.  Such a history file can be generated with the
+and dumps them. Such a history file can be generated with the
 
 
 .SH NOTES
diff --git a/man/man8/ip.8 b/man/man8/ip.8
index 93d3218..990c6fe 100644
--- a/man/man8/ip.8
+++ b/man/man8/ip.8
@@ -366,11 +366,11 @@ throw " | " unreachable " | " prohibit " | " blackhole " | " nat " ]"
 
 .ti -8
 .BR "ip maddr" " [ " add " | " del " ]"
-.IB MULTIADDR " dev " STRING
+.IB MULTIADDR " dev " NAME
 
 .ti -8
 .BR "ip maddr show" " [ " dev
-.IR STRING " ]"
+.IR NAME " ]"
 
 .ti -8
 .BR "ip mroute show" " ["
@@ -382,7 +382,7 @@ throw " | " unreachable " | " prohibit " | " blackhole " | " nat " ]"
 
 .ti -8
 .BR "ip monitor" " [ " all " |"
-.IR LISTofOBJECTS " ]"
+.IR OBJECT-LIST " ]"
 
 .ti -8
 .BR "ip xfrm"
@@ -688,7 +688,7 @@ throw " | " unreachable " | " prohibit " | " blackhole " | " nat " ]"
 
 .ti -8
 .BR "ip xfrm monitor" " [ " all " | "
-.IR LISTofOBJECTS " ] "
+.IR OBJECT-LIST " ] "
 
 .ti -8
 .BR "ip token" " { " "COMMAND " | " help" " } "
@@ -719,8 +719,8 @@ print the version of the
 utility and exit.
 
 .TP
-.BR "\-s" , " \-stats", " \-statistics"
-output more information.  If the option
+.BR "\-s" , " \-stats" , " \-statistics"
+Output more information. If the option
 appears twice or more, the amount of information increases.
 As a rule, the information is statistics or some time values.
 
@@ -734,13 +734,13 @@ print human readable rates in IEC units (ie. 1K = 1024).
 .RE
 
 .TP
-.BR "\-f" , " \-family"
-followed by protocol family identifier:
-.BR "inet" , " inet6"
+.BR "\-f" , " \-family " <FAMILY>
+Specifies the protocol family to use. The protocol family identifier can be one of
+.BR "inet" , " inet6" , " ipx" , " dnet"
 or
-.B link
-,enforce the protocol family to use.  If the option is not present,
-the protocol family is guessed from other arguments.  If the rest
+.BR link .
+If this option is not present,
+the protocol family is guessed from other arguments. If the rest
 of the command line does not give enough information to guess the
 family,
 .B ip
@@ -771,11 +771,11 @@ shortcut for
 .BR "\-o" , " \-oneline"
 output each record on a single line, replacing line feeds
 with the
-.B '\e\'
+.B '\e'
 character. This is convenient when you want to count records
 with
 .BR wc (1)
- or to
+or to
 .BR grep (1)
 the output.
 
@@ -831,9 +831,9 @@ host addresses.
 
 .PP
 The names of all objects may be written in full or
-abbreviated form, f.e.
+abbreviated form, for example
 .B address
-is abbreviated as
+can be abbreviated as
 .B addr
 or just
 .B a.
@@ -850,9 +850,9 @@ and
 (or
 .B list
 ) objects, but some objects do not allow all of these operations
-or have some additional commands.  The
+or have some additional commands. The
 .B help
-command is available for all objects.  It prints
+command is available for all objects. It prints
 out a list of available commands and argument syntax conventions.
 .sp
 If no command is given, some default command is assumed.
@@ -872,7 +872,7 @@ display and change the state of devices.
 .TP
 .BI dev " NAME " (default)
 .I NAME
-specifies network device to operate on. When configuring SR-IOV Virtual Fuction
+specifies network device to operate on. When configuring SR-IOV Virtual Function
 (VF) devices, this keyword should specify the associated Physical Function (PF)
 device.
 
@@ -903,7 +903,7 @@ flag on the device.
 
 .TP
 .BI name " NAME"
-change the name of the device.  This operation is not
+change the name of the device. This operation is not
 recommended if the device is running or has some addresses
 already configured.
 
@@ -998,7 +998,7 @@ If multiple parameter changes are requested,
 aborts immediately after any of the changes have failed.
 This is the only case when
 .B ip
-can move the system to an unpredictable state.  The solution
+can move the system to an unpredictable state. The solution
 is to avoid changing several parameters with one
 .B ip link set
 call.
@@ -1020,9 +1020,9 @@ only display running interfaces.
 The
 .B address
 is a protocol (IP or IPv6) address attached
-to a network device.  Each device must have at least one address
-to use the corresponding protocol.  It is possible to have several
-different addresses attached to one device.  These addresses are not
+to a network device. Each device must have at least one address
+to use the corresponding protocol. It is possible to have several
+different addresses attached to one device. These addresses are not
 discriminated, so that the term
 .B alias
 is not quite appropriate for them and we do not use it in this document.
@@ -1042,7 +1042,7 @@ the name of the device to add the address to.
 .BI local " ADDRESS " (default)
 the address of the interface. The format of the address depends
 on the protocol. It is a dotted quad for IP and a sequence of
-hexadecimal halfwords separated by colons for IPv6.  The
+hexadecimal halfwords separated by colons for IPv6. The
 .I ADDRESS
 may be followed by a slash and a decimal number which encodes
 the network prefix length.
@@ -1053,8 +1053,8 @@ the address of the remote endpoint for pointopoint interfaces.
 Again, the
 .I ADDRESS
 may be followed by a slash and a decimal number, encoding the network
-prefix length.  If a peer address is specified, the local address
-cannot have a prefix length.  The network prefix is associated
+prefix length. If a peer address is specified, the local address
+cannot have a prefix length. The network prefix is associated
 with the peer rather than with the local address.
 
 .TP
@@ -1065,7 +1065,7 @@ It is possible to use the special symbols
 .B '+'
 and
 .B '-'
-instead of the broadcast address.  In this case, the broadcast address
+instead of the broadcast address. In this case, the broadcast address
 is derived by setting/resetting the host bits of the interface prefix.
 
 .TP
@@ -1101,7 +1101,7 @@ valid inside this site.
 .B Arguments:
 coincide with the arguments of
 .B ip addr add.
-The device name is a required argument.  The rest are optional.
+The device name is a required argument. The rest are optional.
 If no arguments are given, the first address is deleted.
 
 .SS ip address show - look at protocol addresses
@@ -1156,14 +1156,14 @@ The difference is that it does not run when no arguments are given.
 .B Warning:
 This command (and other
 .B flush
-commands described below) is pretty dangerous.  If you make a mistake,
+commands described below) is pretty dangerous. If you make a mistake,
 it will not forgive it, but will cruelly purge all the addresses.
 
 .PP
 With the
 .B -statistics
 option, the command becomes verbose. It prints out the number of deleted
-addresses and the number of rounds made to flush the address list.  If
+addresses and the number of rounds made to flush the address list. If
 this option is given twice,
 .B ip addr flush
 also dumps all the deleted addresses in the format described in the
@@ -1171,12 +1171,12 @@ previous subsection.
 
 .SH ip addrlabel - protocol address label management.
 
-IPv6 address label is used for address selection
-described in RFC 3484.  Precedence is managed by userspace,
-and only label is stored in kernel.
+IPv6 address labels are used for address selection;
+they are described in RFC 3484. Precedence is managed by userspace,
+and only the label itself is stored in the kernel.
 
 .SS ip addrlabel add - add an address label
-the command adds an address label entry to the kernel.
+add an address label entry to the kernel.
 .TP
 .BI prefix " PREFIX"
 .TP
@@ -1187,22 +1187,22 @@ the outgoing interface.
 the label for the prefix.
 0xffffffff is reserved.
 .SS ip addrlabel del - delete an address label
-the command deletes an address label entry in the kernel.
+delete an address label entry from the kernel.
 .B Arguments:
 coincide with the arguments of
 .B ip addrlabel add
-but label is not required.
+but the label is not required.
 .SS ip addrlabel list - list address labels
-the command show contents of address labels.
+list the current address label entries in the kernel.
 .SS ip addrlabel flush - flush address labels
-the command flushes the contents of address labels and it does not restore default settings.
+flush all address labels in the kernel. This does not restore any default settings.
 .SH ip neighbour - neighbour/arp tables management.
 
 .B neighbour
 objects establish bindings between protocol addresses and
 link layer addresses for hosts sharing the same link.
 Neighbour entries are organized into tables. The IPv4 neighbour table
-is known by another name - the ARP table.
+is also known by another name - the ARP table.
 
 .P
 The corresponding commands display neighbour bindings
@@ -1304,7 +1304,7 @@ only list neighbour entries in this state.
 .I NUD_STATE
 takes values listed below or the special value
 .B all
-which means all states.  This option may occur more than once.
+which means all states. This option may occur more than once.
 If this option is absent,
 .B ip
 lists all entries except for
@@ -1328,9 +1328,9 @@ and
 .PP
 With the
 .B -statistics
-option, the command becomes verbose.  It prints out the number of
+option, the command becomes verbose. It prints out the number of
 deleted neighbours and the number of rounds made to flush the
-neighbour table.  If the option is given
+neighbour table. If the option is given
 twice,
 .B ip neigh flush
 also dumps all the deleted neighbours.
@@ -1348,7 +1348,7 @@ by the route prefix.
 
 .sp
 .B unreachable
-- these destinations are unreachable.  Packets are discarded and the
+- these destinations are unreachable. Packets are discarded and the
 ICMP message
 .I host unreachable
 is generated.
@@ -1358,59 +1358,58 @@ error.
 
 .sp
 .B blackhole
-- these destinations are unreachable.  Packets are discarded silently.
+- these destinations are unreachable. Packets are discarded silently.
 The local senders get an
 .I EINVAL
 error.
 
 .sp
 .B prohibit
-- these destinations are unreachable.  Packets are discarded and the
+- these destinations are unreachable. Packets are discarded and the
 ICMP message
 .I communication administratively prohibited
-is generated.  The local senders get an
+is generated. The local senders get an
 .I EACCES
 error.
 
 .sp
 .B local
-- the destinations are assigned to this host.  The packets are looped
+- the destinations are assigned to this host. The packets are looped
 back and delivered locally.
 
 .sp
 .B broadcast
-- the destinations are broadcast addresses.  The packets are sent as
+- the destinations are broadcast addresses. The packets are sent as
 link broadcasts.
 
 .sp
 .B throw
 - a special control route used together with policy rules. If such a
 route is selected, lookup in this table is terminated pretending that
-no route was found.  Without policy routing it is equivalent to the
-absence of the route in the routing table.  The packets are dropped
+no route was found. Without policy routing it is equivalent to the
+absence of the route in the routing table. The packets are dropped
 and the ICMP message
 .I net unreachable
-is generated.  The local senders get an
+is generated. The local senders get an
 .I ENETUNREACH
 error.
 
 .sp
 .B nat
-- a special NAT route.  Destinations covered by the prefix
+- a special NAT route. Destinations covered by the prefix
 are considered to be dummy (or external) addresses which require translation
-to real (or internal) ones before forwarding.  The addresses to translate to
+to real (or internal) ones before forwarding. The addresses to translate to
 are selected with the attribute
+.BR "via" .
 .B Warning:
 Route NAT is no longer supported in Linux 2.6.
 
-
-.BR "via" .
 .sp
 .B anycast
 .RI "- " "not implemented"
 the destinations are
 .I anycast
-addresses assigned to this host.  They are mainly equivalent
+addresses assigned to this host. They are mainly equivalent
 to
 .B local
 with one difference: such addresses are invalid when used
@@ -1418,7 +1417,7 @@ as the source address of any packet.
 
 .sp
 .B multicast
-- a special type used for multicast routing.  It is not present in
+- a special type used for multicast routing. It is not present in
 normal routing tables.
 .in -8
 
@@ -1434,10 +1433,10 @@ table (ID 254) and the kernel only uses this table when calculating routes.
 
 .sp
 Actually, one other table always exists, which is invisible but
-even more important.  It is the
+even more important. It is the
 .B local
-table (ID 255).  This table
-consists of routes for local and broadcast addresses.  The kernel maintains
+table (ID 255). This table
+consists of routes for local and broadcast addresses. The kernel maintains
 this table automatically and the administrator usually need not modify it
 or even look at it.
 
@@ -1451,7 +1450,7 @@ is used.
 
 .TP
 .BI to " TYPE PREFIX " (default)
-the destination prefix of the route.  If
+the destination prefix of the route. If
 .I TYPE
 is omitted,
 .B ip
@@ -1462,9 +1461,9 @@ Other values of
 are listed above.
 .I PREFIX
 is an IP or IPv6 address optionally followed by a slash and the
-prefix length.  If the length of the prefix is missing,
+prefix length. If the length of the prefix is missing,
 .B ip
-assumes a full-length host route.  There is also a special
+assumes a full-length host route. There is also a special
 .I PREFIX
 .B default
 - which is equivalent to IP
@@ -1476,9 +1475,9 @@ or to IPv6
 .BI tos " TOS"
 .TP
 .BI dsfield " TOS"
-the Type Of Service (TOS) key.  This key has no associated mask and
+the Type Of Service (TOS) key. This key has no associated mask and
 the longest match is understood as: First, compare the TOS
-of the route and of the packet.  If they are not equal, then the packet
+of the route and of the packet. If they are not equal, then the packet
 may still match a route with a zero TOS.
 .I TOS
 is either an 8 bit hexadecimal number or an identifier
@@ -1504,7 +1503,7 @@ If this parameter is omitted,
 assumes the
 .B main
 table, with the exception of
-.BR local " , " broadcast " and " nat
+.BR local ", " broadcast " and " nat
 routes, which are put into the
 .B local
 table by default.
@@ -1515,12 +1514,12 @@ the output device name.
 
 .TP
 .BI via " ADDRESS"
-the address of the nexthop router.  Actually, the sense of this field
-depends on the route type.  For normal
+the address of the nexthop router. Actually, the sense of this field
+depends on the route type. For normal
 .B unicast
 routes it is either the true next hop router or, if it is a direct
 route installed in BSD compatibility mode, it can be a local address
-of the interface.  For NAT routes it is the first address of the block
+of the interface. For NAT routes it is the first address of the block
 of translated IP destinations.
 
 .TP
@@ -1539,10 +1538,10 @@ may be a number or a string from the file
 .BI mtu " MTU"
 .TP
 .BI "mtu lock" " MTU"
-the MTU along the path to the destination.  If the modifier
+the MTU along the path to the destination. If the modifier
 .B lock
 is not used, the MTU may be updated by the kernel due to
-Path MTU Discovery.  If the modifier
+Path MTU Discovery. If the modifier
 .B lock
 is used, no path MTU discovery will be tried, all packets
 will be sent without the DF bit in IPv4 case or fragmented
@@ -1551,7 +1550,7 @@ to MTU for IPv6.
 .TP
 .BI window " NUMBER"
 the maximal window for TCP to advertise to these destinations,
-measured in bytes.  It limits maximal data bursts that our TCP
+measured in bytes. It limits maximal data bursts that our TCP
 peers are allowed to send to us.
 
 .TP
@@ -1571,7 +1570,7 @@ above.
 .TP
 .BI rto_min " TIME " "(2.6.23+ only)"
 the minimum TCP Retransmission TimeOut to use when communicating with this
-destination.  Values are specified as with
+destination. Values are specified as with
 .BI rtt
 above.
 
@@ -1581,7 +1580,7 @@ an estimate for the initial slow start threshold.
 
 .TP
 .BI cwnd " NUMBER " "(2.3.15+ only)"
-the clamp for congestion window.  It is ignored if the
+the clamp for congestion window. It is ignored if the
 .B lock
 flag is not used.
 
@@ -1599,7 +1598,7 @@ The default value is zero, meaning to use Slow Start value.
 .TP
 .BI advmss " NUMBER " "(2.3.15+ only)"
 the MSS ('Maximal Segment Size') to advertise to these
-destinations when establishing TCP connections.  If it is not given,
+destinations when establishing TCP connections. If it is not given,
 Linux uses a default value calculated from the first hop device MTU.
 (If the path to these destination is asymmetric, this guess may be wrong.)
 
@@ -1662,7 +1661,7 @@ If the routing protocol ID is not given,
 .B ip assumes protocol
 .B boot
 (i.e. it assumes the route was added by someone who doesn't
-understand what they are doing).  Several protocol values have
+understand what they are doing). Several protocol values have
 a fixed interpretation.
 Namely:
 
@@ -1716,7 +1715,7 @@ but their semantics are a bit different.
 
 Key values
 .RB "(" to ", " tos ", " preference " and " table ")"
-select the route to delete.  If optional attributes are present,
+select the route to delete. If optional attributes are present,
 .B ip
 verifies that they coincide with the attributes of the route to delete.
 If no route with the given key and attributes was found,
@@ -1763,13 +1762,14 @@ i.e. it lists the entire table.
 
 .TP
 .BI tos " TOS"
+.TP
 .BI dsfield " TOS"
 only select routes with the given TOS.
 
 .TP
 .BI table " TABLEID"
-show the routes from this table(s).  The default setting is to show
-.BR table main "."
+show the routes from this table(s). The default setting is to show table
+.BR main "."
 .I TABLEID
 may either be the ID of a real table or one of the special values:
 .sp
@@ -1838,7 +1838,7 @@ this command flushes routes selected by some criteria.
 .sp
 The arguments have the same syntax and semantics as the arguments of
 .BR "ip route show" ,
-but routing tables are not listed but purged.  The only difference is
+but routing tables are not listed but purged. The only difference is
 the default action:
 .B show
 dumps all the IP main routing table but
@@ -1896,7 +1896,7 @@ Note that this operation is not equivalent to
 .B show
 shows existing routes.
 .B get
-resolves them and creates new clones if necessary.  Essentially,
+resolves them and creates new clones if necessary. Essentially,
 .B get
 is equivalent to sending a packet along this path.
 If the
@@ -1906,7 +1906,7 @@ to output packets towards the requested destination.
 This is equivalent to pinging the destination
 with a subsequent
 .BR "ip route ls cache" ,
-however, no packets are actually sent.  With the
+however, no packets are actually sent. With the
 .B iif
 argument, the kernel pretends that a packet arrived from this interface
 and searches for a path to forward the packet.
@@ -1937,16 +1937,16 @@ Each policy routing rule consists of a
 .B selector
 and an
 .B action predicate.
-The RPDB is scanned in the order of increasing priority. The selector
+The RPDB is scanned in order of decreasing priority. The selector
 of each rule is applied to {source address, destination address, incoming
 interface, tos, fwmark} and, if the selector matches the packet,
-the action is performed.  The action predicate may return with success.
+the action is performed. The action predicate may return with success.
 In this case, it will either give a route or failure indication
 and the RPDB lookup is terminated. Otherwise, the RPDB program
-continues on the next rule.
+continues with the next rule.
 
 .P
-Semantically, natural action is to select the nexthop and the output device.
+Semantically, the natural action is to select the nexthop and the output device.
 
 .P
 At startup time the kernel configures the default RPDB consisting of three
@@ -1985,18 +1985,18 @@ table
 (ID 253).
 The
 .B default
-table is empty.  It is reserved for some post-processing if no previous
+table is empty. It is reserved for some post-processing if no previous
 default rules selected the packet.
 This rule may also be deleted.
 
 .P
 Each RPDB entry has additional
-attributes.  F.e. each rule has a pointer to some routing
-table.  NAT and masquerading rules have an attribute to select new IP
-address to translate/masquerade.  Besides that, rules have some
+attributes. F.e. each rule has a pointer to some routing
+table. NAT and masquerading rules have an attribute to select new IP
+address to translate/masquerade. Besides that, rules have some
 optional attributes, which routes have, namely
 .BR "realms" .
-These values do not override those contained in the routing tables.  They
+These values do not override those contained in the routing tables. They
 are only used if the route did not select any attributes.
 
 .sp
@@ -2027,7 +2027,7 @@ of the IP packet into some other value.
 
 .TP
 .BI type " TYPE " (default)
-the type of this rule.  The list of valid types was given in the previous
+the type of this rule. The list of valid types was given in the previous
 subsection.
 
 .TP
@@ -2040,8 +2040,8 @@ select the destination prefix to match.
 
 .TP
 .BI iif " NAME"
-select the incoming device to match.  If the interface is loopback,
-the rule only matches packets originating from this host.  This means
+select the incoming device to match. If the interface is loopback,
+the rule only matches packets originating from this host. This means
 that you may create separate routing tables for forwarded and local
 packets and, hence, completely segregate them.
 
@@ -2059,7 +2059,7 @@ value to match.
 
 .TP
 .BI priority " PREFERENCE"
-the priority of this rule.  Each rule should have an explicitly
+the priority of this rule. Each rule should have an explicitly
 set
 .I unique
 priority value.
@@ -2073,7 +2073,7 @@ It is also possible to use lookup instead of table.
 .TP
 .BI realms " FROM/TO"
 Realms to select if the rule matched and the routing table lookup
-succeeded.  Realm
+succeeded. Realm
 .I TO
 is only used if the route did not select any realm.
 
@@ -2090,7 +2090,7 @@ Using map-to instead of nat means the same thing.
 
 .B Warning:
 Changes to the RPDB made with these commands do not become active
-immediately.  It is assumed that after a script finishes a batch of
+immediately. It is assumed that after a script finishes a batch of
 updates, it flushes the routing cache with
 .BR "ip route flush cache" .
 
@@ -2114,14 +2114,14 @@ the device name.
 
 .SS ip maddress add - add a multicast address
 .SS ip maddress delete - delete a multicast address
-these commands attach/detach a static link layer multicast address
+these commands attach/detach a static link-layer multicast address
 to listen on the interface.
 Note that it is impossible to join protocol multicast groups
-statically.  This command only manages link layer addresses.
+statically. This command only manages link-layer addresses.
 
 .TP
 .BI address " LLADDRESS " (default)
-the link layer multicast address.
+the link-layer multicast address.
 
 .TP
 .BI dev " NAME"
@@ -2129,7 +2129,7 @@ the device to join/leave this multicast address.
 
 .SH ip mroute - multicast routing cache management
 .B mroute
-objects are multicast routing cache entries created by a user level
+objects are multicast routing cache entries created by a user-level
 mrouting daemon (f.e.
 .B pimd
 or
@@ -2139,7 +2139,7 @@ or
 Due to the limitations of the current interface to the multicast routing
 engine, it is impossible to change
 .B mroute
-objects administratively, so we may only display them.  This limitation
+objects administratively, so we can only display them. This limitation
 will be removed in the future.
 
 .SS ip mroute show - list mroute cache entries
@@ -2160,9 +2160,9 @@ the prefix selecting the IP source addresses of the multicast route.
 .B tunnel
 objects are tunnels, encapsulating packets in IP packets and then
 sending them over the IP infrastructure.
-The encapulating (or outer) address family is specified by the
+The encapsulating (or outer) address family is specified by the
 .B -f
-option.  The default is IPv4.
+option. The default is IPv4.
 
 .SS ip tunnel add - add a new tunnel
 .SS ip tunnel change - change an existing tunnel
@@ -2228,8 +2228,8 @@ changes.
 .TP
 .B nopmtudisc
 disable Path MTU Discovery on this tunnel.
-It is enabled by default.  Note that a fixed ttl is incompatible
-with this option: tunnelling with a fixed ttl always makes pmtu
+It is enabled by default. Note that a fixed ttl is incompatible
+with this option: tunneling with a fixed ttl always makes pmtu
 discovery.
 
 .TP
@@ -2259,7 +2259,7 @@ flag calculates checksums for outgoing packets.
 The
 .B icsum
 flag requires that all input packets have the correct
-checksum.  The
+checksum. The
 .B csum
 flag is equivalent to the combination
 .BR "icsum ocsum" .
@@ -2288,7 +2288,7 @@ Inherit DS field between inner and outer header.
 .TP
 .BI encaplim " ELIM"
 .RB ( " only IPv6 tunnels " )
-set a fixed encapsulation limit.  Default is 4.
+set a fixed encapsulation limit. Default is 4.
 
 .TP
 .BI flowlabel " FLOWLABEL"
@@ -2318,13 +2318,13 @@ This command has no arguments.
 The
 .B ip
 utility can monitor the state of devices, addresses
-and routes continuously.  This option has a slightly different format.
+and routes continuously. This option has a slightly different format.
 Namely, the
 .B monitor
 command is the first in the command line and then the object list follows:
 
 .BR "ip monitor" " [ " all " |"
-.IR LISTofOBJECTS " ]"
+.IR OBJECT-LIST " ]"
 
 .I OBJECT-LIST
 is the list of object types that we want to monitor.
@@ -2338,11 +2338,14 @@ opens RTNETLINK, listens on it and dumps state changes in the format
 described in previous sections.
 
 .P
-If a file name is given, it does not listen on RTNETLINK,
-but opens the file containing RTNETLINK messages saved in binary format
-and dumps them.  Such a history file can be generated with the
+If the
+.BI file
+option is given, the program does not listen on RTNETLINK,
+but opens the given file, and dumps its contents. The file
+should contain RTNETLINK messages saved in binary format.
+Such a file can be generated with the
 .B rtmon
-utility.  This utility has a command line syntax similar to
+utility. This utility has a command line syntax similar to
 .BR "ip monitor" .
 Ideally,
 .B rtmon
@@ -2357,7 +2360,7 @@ in a startup script, you will be able to view the full history
 later.
 
 .P
-Certainly, it is possible to start
+Nevertheless, it is possible to start
 .B rtmon
 at any time.
 It prepends the history with the state snapshot dumped at the moment
diff --git a/man/man8/rtmon.8 b/man/man8/rtmon.8
index c9359d8..0538752 100644
--- a/man/man8/rtmon.8
+++ b/man/man8/rtmon.8
@@ -34,7 +34,7 @@ Show summary of options.
 .TP
 .B file FILE [ all | LISTofOBJECTS ]
 Log output to FILE. LISTofOBJECTS is the list of object types that we
-want to monitor.  It may contain 'link', 'address', 'route'
+want to monitor. It may contain 'link', 'address', 'route'
 and 'all'. 'link' specifies the network device, 'address' the protocol
 (IP or IPv6) address on a device, 'route' the routing table entry
 and 'all' does what the name says.
diff --git a/man/man8/ss.8 b/man/man8/ss.8
index a166c94..b85deac 100644
--- a/man/man8/ss.8
+++ b/man/man8/ss.8
@@ -14,7 +14,7 @@ It can display more TCP and state informations than other tools.
 .SH OPTIONS
 When no option is used ss displays a list of 
 open non-listening TCP sockets that have established connection.
-.TP
+.P
 These programs follow the usual GNU command line syntax, with long
 options starting with two dashes (`-').
 A summary of options is included below.
diff --git a/man/man8/tc-basic.8 b/man/man8/tc-basic.8
new file mode 100644
index 0000000..fb39eaa
--- /dev/null
+++ b/man/man8/tc-basic.8
@@ -0,0 +1,34 @@
+.TH "Basic classifier in tc" 8 "21 Oct 2015" "iproute2" "Linux"
+
+.SH NAME
+basic \- basic traffic control filter
+.SH SYNOPSIS
+.in +8
+.ti -8
+.BR tc " " filter " ... " basic " [ " match
+.IR EMATCH_TREE " ] [ "
+.B action
+.IR ACTION_SPEC " ] [ "
+.B classid
+.IR CLASSID " ]"
+.SH DESCRIPTION
+The
+.B basic
+filter allows to classify packets using the extended match infrastructure.
+.SH OPTIONS
+.TP
+.BI action " ACTION_SPEC"
+Apply an action from the generic actions framework on matching packets.
+.TP
+.BI classid " CLASSID"
+Push matching packets into the class identified by
+.IR CLASSID .
+.TP
+.BI match " EMATCH_TREE"
+Match packets using the extended match infrastructure. See
+.BR tc-ematch (8)
+for a detailed description of the allowed syntax in
+.IR EMATCH_TREE .
+.SH SEE ALSO
+.BR tc (8),
+.BR tc-ematch (8)
diff --git a/man/man8/tc-cbq-details.8 b/man/man8/tc-cbq-details.8
index 09badb9..ddaf3ca 100644
--- a/man/man8/tc-cbq-details.8
+++ b/man/man8/tc-cbq-details.8
@@ -58,8 +58,8 @@ interval timeconstant
 
 .SH DESCRIPTION
 Class Based Queueing is a classful qdisc that implements a rich
-linksharing hierarchy of classes.  It contains shaping elements as
-well as prioritizing capabilities.  Shaping is performed using link
+linksharing hierarchy of classes. It contains shaping elements as
+well as prioritizing capabilities. Shaping is performed using link
 idle time calculations based on the timing of dequeue events and 
 underlying link bandwidth.
 
@@ -273,7 +273,7 @@ are still deemed to have this size. Defaults to zero.
 .TP
 ewma log
 When CBQ needs to measure the average idle time, it does so using an 
-Exponentially Weighted Moving Average which smoothes out measurements into
+Exponentially Weighted Moving Average which smooths out measurements into
 a moving average. The EWMA LOG determines how much smoothing occurs. Defaults 
 to 5. Lower values imply greater sensitivity. Must be between 0 and 31.
 .P
diff --git a/man/man8/tc-cbq.8 b/man/man8/tc-cbq.8
index 79fb93b..b900e1c 100644
--- a/man/man8/tc-cbq.8
+++ b/man/man8/tc-cbq.8
@@ -60,8 +60,8 @@ interval timeconstant
 
 .SH DESCRIPTION
 Class Based Queueing is a classful qdisc that implements a rich
-linksharing hierarchy of classes.  It contains shaping elements as
-well as prioritizing capabilities.  Shaping is performed using link
+linksharing hierarchy of classes. It contains shaping elements as
+well as prioritizing capabilities. Shaping is performed using link
 idle time calculations based on the timing of dequeue events and 
 underlying link bandwidth.
 
@@ -184,7 +184,7 @@ are still deemed to have this size. Defaults to zero.
 .TP
 ewma log
 When CBQ needs to measure the average idle time, it does so using an 
-Exponentially Weighted Moving Average which smoothes out measurements into
+Exponentially Weighted Moving Average which smooths out measurements into
 a moving average. The EWMA LOG determines how much smoothing occurs. Lower 
 values imply greater sensitivity. Must be between 0 and 31. Defaults 
 to 5.
diff --git a/man/man8/tc-cgroup.8 b/man/man8/tc-cgroup.8
new file mode 100644
index 0000000..2bea7d4
--- /dev/null
+++ b/man/man8/tc-cgroup.8
@@ -0,0 +1,80 @@
+.TH "Cgroup classifier in tc" 8 " 21 Oct 2015" "iproute2" "Linux"
+
+.SH NAME
+cgroup \- control group based traffic control filter
+.SH SYNOPSIS
+.in +8
+.ti -8
+.BR tc " " filter " ... " cgroup " [ " match
+.IR EMATCH_TREE " ] [ "
+.B action
+.IR ACTION_SPEC " ]"
+.SH DESCRIPTION
+This filter serves as a hint to
+.B tc
+that the assigned class ID of the net_cls control group the process the packet
+originates from belongs to should be used for classification. Obviously, it is
+useful for locally generated packets only.
+.SH OPTIONS
+.TP
+.BI action " ACTION_SPEC"
+Apply an action from the generic actions framework on matching packets.
+.TP
+.BI match " EMATCH_TREE"
+Match packets using the extended match infrastructure. See
+.BR tc-ematch (8)
+for a detailed description of the allowed syntax in
+.IR EMATCH_TREE .
+.SH EXAMPLES
+In order to use this filter, a net_cls control group has to be created first and
+class as well as process ID(s) assigned to it. The following creates a net_cls
+cgroup named "foobar":
+
+.RS
+.EX
+modprobe cls_cgroup
+mkdir /sys/fs/cgroup/net_cls
+mount -t cgroup -onet_cls net_cls /sys/fs/cgroup/net_cls
+mkdir /sys/fs/cgroup/net_cls/foobar
+.EE
+.RE
+
+To assign a class ID to the created cgroup, a file named
+.I net_cls.classid
+has to be created which contains the class ID to be assigned as a hexadecimal,
+64bit wide number. The upper 32bits are reserved for the major handle, the
+remaining hold the minor. So a class ID of e.g.
+.B ff:be
+has to be written like so:
+.B 0xff00be
+(leading zeroes may be omitted). To continue the above example, the following
+assigns class ID 1:2 to foobar cgroup:
+
+.RS
+.EX
+echo 0x10002 > /sys/fs/cgroup/net_cls/foobar/net_cls.classid
+.EE
+.RE
+
+Finally some PIDs can be assigned to the given cgroup:
+
+.RS
+.EX
+echo 1234 > /sys/fs/cgroup/net_cls/foobar/tasks
+echo 5678 > /sys/fs/cgroup/net_cls/foobar/tasks
+.EE
+.RE
+
+Now by simply attaching a
+.B cgroup
+filter to a
+.B qdisc
+makes packets from PIDs 1234 and 5678 be pushed into class 1:2.
+
+.SH SEE ALSO
+.BR tc (8),
+.BR tc-ematch (8),
+.br
+the file
+.I Documentation/cgroups/net_cls.txt
+of the Linux kernel tree
diff --git a/man/man8/tc-drr.8 b/man/man8/tc-drr.8
new file mode 100644
index 0000000..1aa9b42
--- /dev/null
+++ b/man/man8/tc-drr.8
@@ -0,0 +1,94 @@
+.TH TC 8 "January 2010" "iproute2" "Linux"
+.SH NAME
+drr \- deficit round robin scheduler
+.SH SYNOPSIS
+.B tc qdisc ... add drr
+.B [ quantum
+bytes
+.B ]
+
+.SH DESCRIPTION
+
+The Deficit Round Robin Scheduler is a classful queuing discipline as
+a more flexible replacement for Stochastic Fairness Queuing.
+
+Unlike SFQ, there are no built-in queues \-\- you need to add classes
+and then set up filters to classify packets accordingly.
+This can be useful e.g. for using RED qdiscs with different settings for particular
+traffic. There is no default class \-\- if a packet cannot be classified,
+it is dropped.
+
+.SH ALGORITHM
+Each class is assigned a deficit counter, initialized to
+.B quantum.
+
+DRR maintains an (internal) ''active'' list of classes whose qdiscs are
+non-empty. This list is used for dequeuing. A packet is dequeued from
+the class at the head of the list if the packet size is smaller or equal
+to the deficit counter. If the counter is too small, it is increased by
+.B quantum
+and the scheduler moves on to the next class in the active list.
+
+
+.SH PARAMETERS
+.TP
+quantum
+Amount of bytes a flow is allowed to dequeue before the scheduler moves to
+the next class. Defaults to the MTU of the interface. The minimum value is 1.
+
+.SH EXAMPLE & USAGE
+
+To attach to device eth0, using the interface MTU as its quantum:
+.P
+# tc qdisc add dev eth0 handle 1 root drr
+.P
+Adding two classes:
+.P
+# tc class add dev eth0 parent 1: classid 1:1 drr
+# tc class add dev eth0 parent 1: classid 1:2 drr
+.P
+You also need to add at least one filter to classify packets.
+.P
+# tc filter add dev eth0 protocol .. classid 1:1
+.P
+
+Like SFQ, DRR is only useful when it owns the queue \-\- it is a pure scheduler and does
+not delay packets. Attaching non-work-conserving qdiscs like tbf to it does not make
+sense \-\- other qdiscs in the active list will also become inactive until the dequeue
+operation succeeds. Embed DRR within another qdisc like HTB or HFSC to ensure it owns the queue.
+.P
+You can mimic SFQ behavior by assigning packets to the attached classes using the
+flow filter:
+
+.B tc qdisc add dev .. drr
+
+.B for i in .. 1024;do
+.br
+.B "\ttc class add dev .. classid $handle:$(print %x $i)"
+.br
+.B "\ttc qdisc add dev .. fifo limit 16"
+.br
+.B done
+
+.B tc filter add .. protocol ip .. $handle flow hash keys src,dst,proto,proto-src,proto-dst divisor 1024 perturb 10
+
+
+.SH SOURCE
+.TP
+o
+M. Shreedhar and George Varghese "Efficient Fair
+Queuing using Deficit Round Robin", Proc. SIGCOMM 95.
+
+.SH NOTES
+
+This implementation does not drop packets from the longest queue on overrun,
+as limits are handled by the individual child qdiscs.
+
+.SH SEE ALSO
+.BR tc (8),
+.BR tc-htb (8),
+.BR tc-sfq (8)
+
+.SH AUTHOR
+sched_drr was written by Patrick McHardy.
+
diff --git a/man/man8/tc-ematch.8 b/man/man8/tc-ematch.8
new file mode 100644
index 0000000..b9bf70c
--- /dev/null
+++ b/man/man8/tc-ematch.8
@@ -0,0 +1,132 @@
+.TH ematch 8 "6 August 2012" iproute2 Linux
+.
+.SH NAME
+ematch \- extended matches for use with "basic" or "flow" filters
+.
+.SH SYNOPSIS
+.sp
+.ad l
+.B "tc filter add .. basic match"
+.RI EXPR
+.B .. flowid ..
+.sp
+
+.IR EXPR " := " TERM " [ { "
+.B and | or
+}
+.IR EXPR
+]
+
+.IR TERM " := [ " \fBnot " ] { " MATCH " | '(' " EXPR " ')' } "
+
+.IR MATCH " := " module " '(' " ARGS " ')' "
+
+.IR ARGS " := " ARG1 " " ARG2 " ..
+
+.SH MATCHES
+
+.SS cmp
+Simple comparison ematch: arithmetic compare of packet data to a given value.
+
+.IR cmp "( " ALIGN " at " OFFSET " [ " ATTRS " ] { " eq " | " lt " | " gt " } " VALUE " )
+
+.IR ALIGN " := { " u8 " | " u16 " | " u32 " } "
+
+.IR ATTRS " := [ layer " LAYER " ] [ mask " MASK " ] [ trans ]
+
+.IR LAYER " := { " link " | " network " | " transport " | " 0..2 " }
+
+.SS meta
+Metadata ematch
+
+.IR meta "( " OBJECT " { " eq " | " lt " |" gt " } " OBJECT " )
+
+.IR OBJECT " := { " META_ID " |  " VALUE " }
+
+.IR META_ID " := " id " [ shift " SHIFT " ] [ mask " MASK " ]
+
+.TP
+meta attributes:
+
+\fBrandom\fP 32 bit random value
+
+\fBloadavg_1\fP Load average in last 5 minutes
+
+\fBnf_mark\fP Netfilter mark
+
+\fBvlan\fP Vlan tag
+
+\fBsk_rcvbuf\fP Receive buffer size
+
+\fBsk_snd_queue\fP Send queue length
+
+.PP
+A full list of meta attributes can be obtained via
+
+# tc filter add dev eth1 basic match 'meta(list)'
+
+.SS nbyte
+match packet data byte sequence
+
+.IR nbyte "( " NEEDLE  " at " OFFSET " [ layer " LAYER " ] )
+
+.IR NEEDLE  " := { " string " | " c-escape-sequence "  } "
+
+.IR OFFSET  " := " int
+
+.IR LAYER " := { " link " | " network " | " transport " | " 0..2 " }
+
+.SS u32
+u32 ematch
+
+.IR u32 "( " ALIGN " " VALUE " " MASK " at [ nexthdr+ ] " OFFSET " )
+
+.IR ALIGN " := { " u8 " | " u16 " | " u32 " }
+
+.SS ipset
+test packet against ipset membership
+
+.IR ipset "( " SETNAME " " FLAGS " )
+
+.IR SETNAME " := " string
+
+.IR FLAGS " := { " FLAG " [, " FLAGS "] }
+
+The flag options are the same as those used by the iptables "set" match.
+
+When using the ipset ematch with the "ip_set_hash:net,iface" set type,
+the interface can be queried using "src,dst (source ip address, outgoing interface) or
+"src,src" (source ip address, incoming interface) syntax.
+
+.SH CAVEATS
+
+The ematch syntax uses '(' and ')' to group expressions. All braces need to be
+escaped properly to prevent shell commandline from interpreting these directly.
+
+When using the ipset ematch with the "ifb" device, the outgoing device will be the
+ifb device itself, e.g. "ifb0".
+The original interface (i.e. the device the packet arrived on) is treated as the incoming interface.
+
+.SH EXAMPLE & USAGE
+
+# tc filter add .. basic match ...
+
+# 'cmp(u16 at 3 layer 2 mask 0xff00 gt 20)'
+
+# 'meta(nfmark gt 24)' and 'meta(tcindex mask 0xf0 eq 0xf0)'
+
+# 'nbyte("ababa" at 12 layer 1)'
+
+# 'u32(u16 0x1122 0xffff at nexthdr+4)'
+
+Check if packet source ip address is member of set named \fBbulk\fP:
+
+# 'ipset(bulk src)'
+
+Check if packet source ip and the interface the packet arrived on is member of "hash:net,iface" set named \fBinteractive\fP:
+
+# 'ipset(interactive src,src)'
+
+.SH "AUTHOR"
+
+The extended match infrastructure was added by Thomas Graf.
diff --git a/man/man8/tc-flow.8 b/man/man8/tc-flow.8
new file mode 100644
index 0000000..f1b7e2a
--- /dev/null
+++ b/man/man8/tc-flow.8
@@ -0,0 +1,265 @@
+.TH "Flow filter in tc" 8 "20 Oct 2015" "iproute2" "Linux"
+
+.SH NAME
+flow \- flow based traffic control filter
+.SH SYNOPSIS
+.TP
+Mapping mode:
+
+.RS
+.in +8
+.ti -8
+.BR tc " " filter " ... " "flow map key "
+.IR KEY " [ " OPS " ] [ " OPTIONS " ] "
+.RE
+.TP
+Hashing mode:
+
+.RS
+.in +8
+.ti -8
+.BR tc " " filter " ... " "flow hash keys "
+.IR KEY_LIST " [ "
+.B perturb
+.IR secs " ] [ " OPTIONS " ] "
+.RE
+
+.in +8
+.ti -8
+.IR OPS " := [ " OPS " ] " OP
+
+.ti -8
+.IR OPTIONS " := [ "
+.B divisor
+.IR NUM " ] [ "
+.B baseclass
+.IR ID " ] [ "
+.B match
+.IR EMATCH_TREE " ] [ "
+.B action
+.IR ACTION_SPEC " ]"
+
+.ti -8
+.IR KEY_LIST " := [ " KEY_LIST " ] " KEY
+
+.ti -8
+.IR OP " := { "
+.BR or " | " and " | " xor " | " rshift " | " addend " } "
+.I NUM
+
+.ti -8
+.IR ID " := " X : Y
+
+.ti -8
+.IR KEY " := { "
+.BR src " | " dst " | " proto " | " proto-src " | " proto-dst " | " iif " | "
+.BR priority " | " mark " | " nfct " | " nfct-src " | " nfct-dst " | "
+.BR nfct-proto-src " | " nfct-proto-dst " | " rt-classid " | " sk-uid " | "
+.BR sk-gid " | " vlan-tag " | " rxhash " }"
+.SH DESCRIPTION
+The
+.B flow
+classifier is meant to extend the
+.B SFQ
+hashing capabilities without hard-coding new hash functions. It also allows
+deterministic mappings of keys to classes.
+.SH OPTIONS
+.TP
+.BI action " ACTION_SPEC"
+Apply an action from the generic actions framework on matching packets.
+.TP
+.BI baseclass " ID"
+An offset for the resulting class ID.
+.I ID
+may be
+.BR root ", " none
+or a hexadecimal class ID in the form [\fIX\fB:\fR]\fIY\fR. If \fIX\fR is
+omitted, it is assumed to be zero.
+.TP
+.BI divisor " NUM"
+Number of buckets to use for sorting into. Keys are calculated modulo
+.IR NUM .
+.TP
+.BI "hash keys " KEY-LIST
+Perform a
+.B jhash2
+operation over the keys in
+.IR KEY-LIST ,
+the result (modulo the
+.B divisor
+if given) is taken as class ID, optionally offset by the value of
+.BR baseclass .
+It is possible to specify an interval (in seconds) after which
+.BR jhash2 's
+entropy source is recreated using the
+.B perturb
+parameter.
+.TP
+.BI "map key " KEY
+Packet data identified by
+.I KEY
+is translated into class IDs to push the packet into. The value may be mangled by
+.I OPS
+before using it for the mapping. They are applied in the order listed here:
+.RS
+.TP 4
+.BI and " NUM"
+Perform bitwise
+.B AND
+operation with numeric value
+.IR NUM .
+.TP
+.BI or " NUM"
+Perform bitwise
+.B OR
+operation with numeric value
+.IR NUM .
+.TP
+.BI xor " NUM"
+Perform bitwise
+.B XOR
+operation with numeric value
+.IR NUM .
+.TP
+.BI rshift " NUM"
+Shift the value of
+.I KEY
+to the right by
+.I NUM
+bits.
+.TP
+.BI addend " NUM"
+Add
+.I NUM
+to the value of
+.IR KEY .
+
+.RE
+.RS
+For the
+.BR or ", " and ", " xor " and " rshift
+operations,
+.I NUM
+is assumed to be an unsigned, 32bit integer value. For the
+.B addend
+operation,
+.I NUM
+may be much more complex: It may be prefixed by a minus ('-') sign to cause
+subtraction instead of addition and for keys of
+.BR src ", " dst ", " nfct-src " and " nfct-dst
+it may be given in IP address notation. See below for an illustrating example.
+.RE
+.TP
+.BI match " EMATCH_TREE"
+Match packets using the extended match infrastructure. See
+.BR tc-ematch (8)
+for a detailed description of the allowed syntax in
+.IR EMATCH_TREE .
+.SH KEYS
+In mapping mode, a single key is used (after optional permutation) to build a
+class ID. The resulting ID is deducible in most cases. In hashing more, a number
+of keys may be specified which are then hashed and the output used as class ID.
+This ID is not deducible in beforehand, and may even change over time for a
+given flow if a
+.B perturb
+interval has been given.
+
+The range of class IDs can be limited by the
+.B divisor
+option, which is used for a modulus.
+.TP
+.BR src ", " dst
+Use source or destination address as key. In case of IPv4 and TIPC, this is the
+actual address value. For IPv6, the 128bit address is folded into a 32bit value
+by XOR'ing the four 32bit words. In all other cases, the kernel-internal socket
+address is used (after folding into 32bits on 64bit systems).
+.TP
+.B proto
+Use the layer four protocol number as key.
+.TP
+.B proto-src
+Use the layer four source port as key. If not available, the kernel-internal
+socket address is used instead.
+.TP
+.B proto-dst
+Use the layer four destination port as key. If not available, the associated
+kernel-internal dst_entry address is used after XOR'ing with the packet's
+layer three protocol number.
+.TP
+.B iif
+Use the incoming interface index as key.
+.TP
+.B priority
+Use the packet's priority as key. Usually this is the IP header's DSCP/ECN
+value.
+.TP
+.B mark
+Use the netfilter
+.B fwmark
+as key.
+.TP
+.B nfct
+Use the associated conntrack entry address as key.
+.TP
+.BR nfct-src ", " nfct-dst ", " nfct-proto-src ", " nfct-proto-dst
+These are conntrack-aware variants of
+.BR src ", " dst ", " proto-src " and " proto-dst .
+In case of NAT, these are basically the packet header's values before NAT was
+applied.
+.TP
+.B rt-classid
+Use the packet's destination routing table entry's realm as key.
+.TP
+.B sk-uid
+.TQ
+.B sk-gid
+For locally generated packets, use the user or group ID the originating socket
+belongs to as key.
+.TP
+.B vlan-tag
+Use the packet's vlan ID as key.
+.TP
+.B rxhash
+Use the flow hash as key.
+
+.SH EXAMPLES
+.TP
+Classic SFQ hash:
+
+.EX
+tc filter add ... flow hash \\
+	keys src,dst,proto,proto-src,proto-dst divisor 1024
+.EE
+.TP
+Classic SFQ hash, but using information from conntrack to work properly in combination with NAT:
+
+.EX
+tc filter add ... flow hash \\
+	keys nfct-src,nfct-dst,proto,nfct-proto-src,nfct-proto-dst \\
+	divisor 1024
+.EE
+.TP
+Map destination IPs of 192.168.0.0/24 to classids 1-257:
+
+.EX
+tc filter add ... flow map \\
+	key dst addend -192.168.0.0 divisor 256
+.EE
+.TP
+Alternative to the above:
+
+.EX
+tc filter add ... flow map \\
+	key dst and 0xff
+.EE
+.TP
+The same, but in reverse order:
+
+.EX
+tc filter add ... flow map \\
+	key dst and 0xff xor 0xff
+.EE
+.SH SEE ALSO
+.BR tc (8),
+.BR tc-ematch (8),
+.BR tc-sfq (8)
diff --git a/man/man8/tc-fw.8 b/man/man8/tc-fw.8
new file mode 100644
index 0000000..d742b47
--- /dev/null
+++ b/man/man8/tc-fw.8
@@ -0,0 +1,66 @@
+.TH "Firewall mark classifier in tc" 8 "21 Oct 2015" "iproute2" "Linux"
+
+.SH NAME
+fw \- fwmark traffic control filter
+.SH SYNOPSIS
+.in +8
+.ti -8
+.BR tc " " filter " ... " fw " [ " classid
+.IR CLASSID " ] [ "
+.B action
+.IR ACTION_SPEC " ]"
+.SH DESCRIPTION
+the
+.B fw
+filter allows to classify packets based on a previously set
+.BR fwmark " by " iptables .
+If it is identical to the filter's
+.BR handle ,
+the filter matches.
+.B iptables
+allows to mark single packets with the
+.B MARK
+target, or whole connections using
+.BR CONNMARK .
+The benefit of using this filter instead of doing the
+heavy-lifting with
+.B tc
+itself is that on one hand it might be convenient to keep packet filtering and
+classification in one place, possibly having to match a packet just once, and on
+the other users familiar with
+.BR iptables " but not " tc
+will have a less hard time adding QoS to their setups.
+.SH OPTIONS
+.TP
+.BI classid " CLASSID"
+Push matching packets to the class identified by
+.IR CLASSID .
+.TP
+.BI action " ACTION_SPEC"
+Apply an action from the generic actions framework on matching packets.
+.SH EXAMPLES
+Take e.g. the following tc filter statement:
+
+.RS
+.EX
+tc filter add ... handle 6 fw classid 1:1
+.EE
+.RE
+
+will match if the packet's
+.B fwmark
+value is
+.BR 6 .
+This is a sample
+.B iptables
+statement marking packets coming in on eth0:
+
+.RS
+.EX
+iptables -t mangle -A PREROUTING -i eth0 -j MARK --set-mark 6
+.EE
+.RE
+.SH SEE ALSO
+.BR tc (8),
+.BR iptables (8),
+.BR iptables-extensions (8)
diff --git a/man/man8/tc-red.8 b/man/man8/tc-red.8
index d02b411..86af43e 100644
--- a/man/man8/tc-red.8
+++ b/man/man8/tc-red.8
@@ -105,7 +105,7 @@ ecn
 As mentioned before, RED can either 'mark' or 'drop'. Explicit Congestion
 Notification allows RED to notify remote hosts that their rate exceeds the
 amount of bandwidth available. Non-ECN capable hosts can only be notified by
-dropping a packet.  If this parameter is specified, packets which indicate
+dropping a packet. If this parameter is specified, packets which indicate
 that their hosts honor ECN will only be marked and not dropped, unless the
 queue size hits
 .B limit
@@ -125,7 +125,7 @@ Some changes to the algorithm by Alexey N. Kuznetsov.
 
 .SH AUTHORS
 Alexey N. Kuznetsov, <kuznet@ms2.inr.ac.ru>,  Alexey Makarenko
-<makar@phoenix.kharkov.ua>, J Hadi Salim <hadi@nortelnetworks.com>.  
+<makar@phoenix.kharkov.ua>, J Hadi Salim <hadi@nortelnetworks.com>.
 This manpage maintained by bert hubert <ahu@ds9a.nl>
 
 
diff --git a/man/man8/tc-route.8 b/man/man8/tc-route.8
new file mode 100644
index 0000000..b865cd1
--- /dev/null
+++ b/man/man8/tc-route.8
@@ -0,0 +1,74 @@
+.TH "Route classifier in tc" 8 "21 Oct 2015" "iproute2" "Linux"
+
+.SH NAME
+route \- route traffic control filter
+.SH SYNOPSIS
+.in +8
+.ti -8
+.BR tc " " filter " ... " route " [ " from
+.IR REALM " | "
+.B fromif
+.IR TAG " ] [ "
+.B to
+.IR REALM " ] [ "
+.B classid
+.IR CLASSID " ] [ "
+.B action
+.IR ACTION_SPEC " ]"
+.SH DESCRIPTION
+Match packets based on routing table entries. This filter centers around the
+possibility to assign a
+.B realm
+to routing table entries. For any packet to be classified by this filter, a
+routing table lookup is performed and the returned
+.B realm
+is used to decide on whether the packet is a match or not.
+.SH OPTIONS
+.TP
+.BI action " ACTION_SPEC"
+Apply an action from the generic actions framework on matching packets.
+.TP
+.BI classid " CLASSID"
+Push matching packets into the class identified by
+.IR CLASSID .
+.TP
+.BI from " REALM"
+.TQ
+.BI fromif " TAG"
+Perform source route lookups.
+.I TAG
+is the name of an interface which must be present on the system at the time of
+.B tc
+invocation.
+.TP
+.BI to " REALM"
+Match if normal (i.e., destination) routing returns the given
+.IR REALM .
+.SH EXAMPLES
+Consider the subnet 192.168.2.0/24 being attached to eth0:
+
+.RS
+.EX
+ip route add 192.168.2.0/24 dev eth0 realm 2
+.EE
+.RE
+
+The following
+.B route
+filter will then match packets from that subnet:
+
+.RS
+.EX
+tc filter add ... route from 2 classid 1:2
+.EE
+.RE
+
+and pass packets on to class 1:2.
+.SH NOTES
+Due to implementation details,
+.B realm
+values must be in a range from 0 to 255, inclusive. Alternatively, a verbose
+name defined in /etc/iproute2/rt_realms may be given instead.
+.SH SEE ALSO
+.BR tc (8),
+.BR ip-route (8)
diff --git a/man/man8/tc-tbf.8 b/man/man8/tc-tbf.8
index 3abb238..431f1e5 100644
--- a/man/man8/tc-tbf.8
+++ b/man/man8/tc-tbf.8
@@ -6,11 +6,11 @@ tbf \- Token Bucket Filter
 rate
 .B burst
 bytes/cell
-.B ( latency 
-ms 
+.B ( latency
+ms
 .B | limit
 bytes
-.B ) [ mpu 
+.B ) [ mpu
 bytes
 .B [ peakrate
 rate
@@ -22,50 +22,50 @@ burst is also known as buffer and maxburst. mtu is also known as minburst.
 .SH DESCRIPTION
 
 The Token Bucket Filter is a classless queueing discipline available for
-traffic control with the 
+traffic control with the
 .BR tc (8)
 command.
 
 TBF is a pure shaper and never schedules traffic. It is non-work-conserving and may throttle
-itself, although packets are available, to ensure that the configured rate is not exceeded. 
+itself, although packets are available, to ensure that the configured rate is not exceeded.
 On all platforms except for Alpha,
-it is able to shape up to 1mbit/s of normal traffic with ideal minimal burstiness, 
-sending out  data exactly at the configured rates. 
+it is able to shape up to 1mbit/s of normal traffic with ideal minimal burstiness,
+sending out  data exactly at the configured rates.
 
 Much higher rates are possible but at the cost of losing the minimal burstiness. In that
-case, data is on average dequeued at the configured rate but may be sent much faster at millisecond 
+case, data is on average dequeued at the configured rate but may be sent much faster at millisecond
 timescales. Because of further queues living in network adaptors, this is often not a problem.
 
 Kernels with a higher 'HZ' can achieve higher rates with perfect burstiness. On Alpha, HZ is ten
-times higher, leading to a 10mbit/s limit to perfection. These calculations hold for packets of on 
+times higher, leading to a 10mbit/s limit to perfection. These calculations hold for packets of on
 average 1000 bytes.
 
 .SH ALGORITHM
-As the name implies, traffic is filtered based on the expenditure of 
+As the name implies, traffic is filtered based on the expenditure of
 .B tokens.
 Tokens roughly correspond to bytes, with the additional constraint that each packet consumes
 some tokens, no matter how small it is. This reflects the fact that even a zero-sized packet occupies
 the link for some time.
 
-On creation, the TBF is stocked with tokens which correspond to the amount of traffic that can be burst 
+On creation, the TBF is stocked with tokens which correspond to the amount of traffic that can be burst
 in one go. Tokens arrive at a steady rate, until the bucket is full.
 
-If no tokens are available, packets are queued, up to a configured limit. The TBF now 
+If no tokens are available, packets are queued, up to a configured limit. The TBF now
 calculates the token deficit, and throttles until the first packet in the queue can be sent.
 
-If it is not acceptable to burst out packets at maximum speed, a peakrate can be configured 
+If it is not acceptable to burst out packets at maximum speed, a peakrate can be configured
 to limit the speed at which the bucket empties. This peakrate is implemented as a second TBF
 with a very small bucket, so that it doesn't burst.
 
-To achieve perfection, the second bucket may contain only a single packet, which leads to 
-the earlier mentioned 1mbit/s limit. 
+To achieve perfection, the second bucket may contain only a single packet, which leads to
+the earlier mentioned 1mbit/s limit.
 
 This limit is caused by the fact that the kernel can only throttle for at minimum 1 'jiffy', which depends
-on HZ as 1/HZ. For perfect shaping, only a single packet can get sent per jiffy - for HZ=100, this means 100 
+on HZ as 1/HZ. For perfect shaping, only a single packet can get sent per jiffy - for HZ=100, this means 100
 packets of on average 1000 bytes each, which roughly corresponds to 1mbit/s.
 
 .SH PARAMETERS
-See 
+See
 .BR tc (8)
 for how to specify the units of these values.
 .TP
@@ -75,30 +75,30 @@ available. You can also specify this the other way around by setting the
 latency parameter, which specifies the maximum amount of time a packet can
 sit in the TBF. The latter calculation takes into account the size of the
 bucket, the rate and possibly the peakrate (if set). These two parameters
-are mutually exclusive. 
+are mutually exclusive.
 .TP
 burst
 Also known as buffer or maxburst.
-Size of the bucket, in bytes. This is the maximum amount of bytes that tokens can be available for instantaneously. 
-In general, larger shaping rates require a larger buffer. For 10mbit/s on Intel, you need at least 10kbyte buffer 
+Size of the bucket, in bytes. This is the maximum amount of bytes that tokens can be available for instantaneously.
+In general, larger shaping rates require a larger buffer. For 10mbit/s on Intel, you need at least 10kbyte buffer
 if you want to reach your configured rate!
 
 If your buffer is too small, packets may be dropped because more tokens arrive per timer tick than fit in your bucket.
 The minimum buffer size can be calculated by dividing the rate by HZ.
 
-Token usage calculations are performed using a table which by default has a resolution of 8 packets. 
-This resolution can be changed by specifying the 
+Token usage calculations are performed using a table which by default has a resolution of 8 packets.
+This resolution can be changed by specifying the
 .B cell
 size with the burst. For example, to specify a 6000 byte buffer with a 16
 byte cell size, set a burst of 6000/16. You will probably never have to set
 this. Must be an integral power of 2.
 .TP
 mpu
-A zero-sized packet does not use zero bandwidth. For ethernet, no packet uses less than 64 bytes. The Minimum Packet Unit 
+A zero-sized packet does not use zero bandwidth. For ethernet, no packet uses less than 64 bytes. The Minimum Packet Unit
 determines the minimal token usage (specified in bytes) for a packet. Defaults to zero.
 .TP
 rate
-The speed knob. See remarks above about limits! See 
+The speed knob. See remarks above about limits! See
 .BR tc (8)
 for units.
 .PP
@@ -106,7 +106,7 @@ Furthermore, if a peakrate is desired, the following parameters are available:
 
 .TP
 peakrate
-Maximum depletion rate of the bucket. Limited to 1mbit/s on Intel, 10mbit/s on Alpha. The peakrate does 
+Maximum depletion rate of the bucket. Limited to 1mbit/s on Intel, 10mbit/s on Alpha. The peakrate does
 not need to be set, it is only necessary if perfect millisecond timescale shaping is required.
 
 .TP
@@ -115,7 +115,7 @@ Specifies the size of the peakrate bucket. For perfect accuracy, should be set t
 If a peakrate is needed, but some burstiness is acceptable, this size can be raised. A 3000 byte minburst
 allows around 3mbit/s of peakrate, given 1000 byte packets.
 
-Like the regular burstsize you can also specify a 
+Like the regular burstsize you can also specify a
 .B cell
 size.
 .SH EXAMPLE & USAGE
diff --git a/man/man8/tc-tcindex.8 b/man/man8/tc-tcindex.8
new file mode 100644
index 0000000..7fcf825
--- /dev/null
+++ b/man/man8/tc-tcindex.8
@@ -0,0 +1,58 @@
+.TH "Traffic control index filter" 8 "21 Oct 2015" "iproute2" "Linux"
+
+.SH NAME
+tcindex \- traffic control index filter
+.SH SYNOPSIS
+.in +8
+.ti -8
+.BR tc " " filter " ... " tcindex " [ " hash
+.IR SIZE " ] [ "
+.B mask
+.IR MASK " ] [ "
+.B shift
+.IR SHIFT " ] [ "
+.BR pas_on " | " fall_through " ] [ " classid
+.IR CLASSID " ] [ "
+.B action
+.BR ACTION_SPEC " ]"
+.SH DESCRIPTION
+This filter allows to match packets based on their
+.B tcindex
+field value, i.e. the combination of the DSCP and ECN fields as present in IPv4
+and IPv6 headers.
+.SH OPTIONS
+.TP
+.BI action " ACTION_SPEC"
+Apply an action from the generic actions framework on matching packets.
+.TP
+.BI classid " CLASSID"
+Push matching packets into the class identified by
+.IR CLASSID .
+.TP
+.BI hash " SIZE"
+Hash table size in entries to use. Defaults to 64.
+.TP
+.BI mask " MASK"
+An optional bitmask to binary
+.BR AND " to the packet's " tcindex
+field before use.
+.TP
+.BI shift " SHIFT"
+The number of bits to right-shift a packet's
+.B tcindex
+value before use. If a
+.B mask
+has been set, masking is done before shifting.
+.TP
+.B pass_on
+If this flag is set, failure to find a class for the resulting ID will make the
+filter fail and lead to the next filter being consulted.
+.TP
+.B fall_through
+This is the opposite of
+.B pass_on
+and the default. The filter will classify the packet even if there is no class
+present for the resulting class ID.
+
+.SH SEE ALSO
+.BR tc (8)
diff --git a/man/man8/tc-u32.8 b/man/man8/tc-u32.8
new file mode 100644
index 0000000..47c8f2d
--- /dev/null
+++ b/man/man8/tc-u32.8
@@ -0,0 +1,663 @@
+.TH "Universal 32bit classifier in tc" 8 "25 Sep 2015" "iproute2" "Linux"
+
+.SH NAME
+u32 \- universal 32bit traffic control filter
+.SH SYNOPSIS
+.in +8
+.ti -8
+.BR tc " " filter " ... [ " handle
+.IR HANDLE " ] "
+.B u32
+.IR OPTION_LIST " [ "
+.B offset
+.IR OFFSET " ] [ "
+.B hashkey
+.IR HASHKEY " ] [ "
+.B classid
+.IR CLASSID " ] [ "
+.B divisor
+.IR uint_value " ] [ "
+.B order
+.IR u32_value " ] [ "
+.B ht
+.IR HANDLE " ] [ "
+.B sample
+.IR SELECTOR " [ "
+.B divisor
+.IR uint_value " ] ] [ "
+.B link
+.IR HANDLE " ] [ "
+.B indev
+.IR ifname " ] [ "
+.BR help " ]"
+
+.ti -8
+.IR HANDLE " := { "
+\fIu12_hex_htid\fB:\fR[\fIu8_hex_hash\fB:\fR[\fIu12_hex_nodeid\fR] | \fB0x\fIu32_hex_value\fR }
+
+.ti -8
+.IR OPTION_LIST " := [ " OPTION_LIST " ] " OPTION
+
+.ti -8
+.IR HASHKEY " := [ "
+.B mask
+.IR u32_hex_value " ] [ "
+.B at
+.IR 4*int_value " ]"
+
+.ti -8
+.IR CLASSID " := { "
+.BR root " | "
+.BR none " | "
+[\fIu16_major\fR]\fB:\fIu16_minor\fR | \fIu32_hex_value\fR }
+
+.ti -8
+.IR OFFSET " := [ "
+.B plus
+.IR int_value " ] [ "
+.B at
+.IR 2*int_value " ] [ "
+.B mask
+.IR u16_hex_value " ] [ "
+.B shift
+.IR int_value " ] [ "
+.BR eat " ]"
+
+.ti -8
+.IR OPTION " := { "
+.B match
+.IR SELECTOR " | "
+.B action
+.IR ACTION " } "
+
+.ti -8
+.IR SELECTOR " := { "
+.B u32
+.IR VAL_MASK_32 " | "
+.B u16
+.IR VAL_MASK_16 " | "
+.B u8
+.IR VAL_MASK_8 " | "
+.B ip
+.IR IP " | "
+.B ip6
+.IR IP6 " | { "
+.BR tcp " | " udp " } "
+.IR TCPUDP " | "
+.B icmp
+.IR ICMP " | "
+.B mark
+.IR VAL_MASK_32 " | "
+.B ether
+.IR ETHER " }"
+
+.ti -8
+.IR IP " := { { "
+.BR src " | " dst " } { " default " | " any " | " all " | "
+.IR ip_address " [ "
+.BR / " { "
+.IR prefixlen " | " netmask " } ] } " AT " | { "
+.BR dsfield " | " ihl " | " protocol " | " precedence " | "
+.BR icmp_type " | " icmp_code " } "
+.IR VAL_MASK_8 " | { "
+.BR sport " | " dport " } "
+.IR VAL_MASK_16 " | "
+.BR nofrag " | " firstfrag " | " df " | " mf " }"
+
+.ti -8
+.IR IP6 " := { { "
+.BR src " | " dst " } { " default " | " any " | " all " | "
+.IR ip6_address " [/" prefixlen " ] } " AT " | "
+.B priority
+.IR VAL_MASK_8 " | { "
+.BR protocol " | " icmp_type " | " icmp_code " } "
+.IR VAL_MASK_8 " | "
+.B flowlabel
+.IR VAL_MASK_32 " | { "
+.BR sport " | " dport " } "
+.IR VAL_MASK_16 " }"
+
+.ti -8
+.IR TCPUDP " := { "
+.BR src " | " dst " } "
+.I VAL_MASK_16
+
+.ti -8
+.IR ICMP " := { "
+.B type
+.IR VAL_MASK_8 " | "
+.B code
+.IR VAL_MASK_8 " }"
+
+.ti -8
+.IR ETHER " := { "
+.BR src " | " dst " } "
+.IR ether_address " " AT
+
+.ti -8
+.IR VAL_MASK_32 " := " u32_value " " u32_hex_mask " [ " AT " ]"
+
+.ti -8
+.IR VAL_MASK_16 " := " u16_value " " u16_hex_mask " [ " AT " ]"
+
+.ti -8
+.IR VAL_MASK_8 " := " u8_value " " u8_hex_mask " [ " AT " ]"
+
+.ti -8
+.IR AT " := [ "
+.BR at " [ " nexthdr+ " ] "
+.IR int_value " ]"
+.SH DESCRIPTION
+The Universal/Ugly 32bit filter allows to match arbitrary bitfields in the
+packet. Due to breaking everything down to values, masks and offsets, It is
+equally powerful and hard to use. Luckily many abstracting directives are
+present which allow defining rules on a higher level and therefore free the
+user from having to fiddle with bits and masks in many cases.
+
+There are two general modes of invocation: The first mode creates a new filter
+to delegate packets to different destinations. Apart from the obvious ones,
+namely classifying the packet by specifying a
+.I CLASSID
+or calling an
+.BR action ,
+one may
+.B link
+one filter to another one (or even a list of them), effectively organizing
+filters into a tree-like hierarchy.
+
+Typically filter delegation is done by means of a hash table, which leads to the
+second mode of invocation: it merely serves to set up these hash tables. Filters
+can select a hash table and provide a key selector from which a hash is to be
+computed and used as key to lookup the table's bucket which contains filters for
+further processing. This is useful if a high number of filters is in use, as the
+overhead of performing the hash operation and table lookup becomes negligible in
+that case. Using hashtables with
+.B u32
+basically involves the following pattern:
+.IP (1) 4
+Creating a new hash table, specifying it's size using the
+.B divisor
+parameter and ideally a handle by which the table can be identified. If the
+latter is not given, the kernel chooses one on it's own, which has to be
+guessed later.
+.IP (2) 4
+Creating filters which link to the created table in
+.I (1)
+using the
+.B link
+parameter and defining the packet data which the kernel will use to calculate
+the
+.BR hashkey .
+.IP (3) 4
+Adding filters to buckets in the hash table from
+.IR (1) .
+In order to avoid having to know how exactly the kernel creates the hash key,
+there is the
+.B sample
+parameter, which gives sample data to hash and thereby define the table bucket
+the filter should be added to.
+
+.RE
+In fact, even if not explicitly requested
+.B u32
+creates a hash table for every
+.B priority
+a filter is being added with. The table's size is 1 though, so it is in fact
+merely a linked list.
+.SH VALUES
+Options and selectors require values to be specified in a specific format, which
+is often non-intuitive. Therefore the terminals in
+.I SYNOPSIS
+have been given descriptive names to indicate the required format and/or maximum
+allowed numeric value: Prefixes
+.IR u32 ", " u16 " and " u8
+indicate four, two and single byte unsigned values. E.g.
+.I u16
+indicates a two byte-sized value in range between 0 and 65535 (0xFFFF)
+inclusive. A prefix of
+.I int
+indicates a four byte signed value. A middle part of
+.I _hex_
+indicates that the value is parsed in hexadecimal format. Otherwise, the
+value's base is automatically detected, i.e. values prefixed with
+.I 0x
+are considered hexadecimal, a leading
+.I 0
+indicates octal format and decimal format otherwise. There are some values with
+special formatting as well:
+.IR ip_address " and " netmask
+are in dotted-quad formatting as usual for IPv4 addresses. An
+.I ip6_address
+is specified in common, colon-separated hexadecimal format. Finally,
+.I prefixlen
+is an unsigned, decimal integer value in range from 0 to the address width in
+bits (32 for IPv4 and 128 for IPv6).
+
+Sometimes values need to be dividable by a certain number. In that case a name
+of the form
+.I N*val
+was chosen, indicating that
+.I val
+must be dividable by
+.IR N .
+Or the other way around: the resulting value must be a multiple of
+.IR N .
+.SH OPTIONS
+.B U32
+recognizes the following options:
+.TP
+.BI handle " HANDLE"
+The handle is used to reference a filter and therefore must be unique. It
+consists of a hash table identifier
+.B htid
+and optional
+.B hash
+(which identifies the hash table's bucket) and
+.BR nodeid .
+All these values are parsed as unsigned, hexadecimal numbers with length 12bits
+(
+.BR htid " and " nodeid )
+or 8bits (
+.BR hash ).
+Alternatively one may specify a single, 32bit long hex number which contains
+the three fields bits in concatenated form. Other than the fields themselves, it
+has to be prefixed by
+.BR 0x .
+.TP
+.BI offset " OFFSET"
+Set an offset which defines where matches of subsequent filters are applied to.
+Therefore this option is useful only when combined with
+.BR link " or a combination of " ht " and " sample .
+The offset may be given explicitly by using the
+.B plus
+keyword, or extracted from the packet data with
+.BR at .
+It is possible to mangle the latter using
+.BR mask " and/or " shift
+keywords. By default, this offset is recorded but not implicitly applied. It is
+used only to substitute the
+.B nexthdr+
+statement. Using the keyword
+.B eat
+though inverses this behaviour: the offset is applied always, and
+.B nexthdr+
+will fall back to zero.
+.TP
+.BI hashkey " HASHKEY"
+Spefify what packet data to use to calculate a hash key for bucket lookup. The
+kernel adjusts the value according to the hash table's size. For this to work,
+the option
+.B link
+must be given.
+.TP
+.BI classid " CLASSID"
+Classify matching packets into the given
+.IR CLASSID ,
+which consists of either 16bit
+.BR major " and " minor
+numbers or a single 32bit value combining both.
+.TP
+.BI divisor " u32_value"
+Specify a modulo value. Used when creating hash tables to define their size or
+for declaring a
+.B sample
+to calculate hash table keys from. Must be a power of two with exponent not
+exceeding eight.
+.TP
+.BI order " u32_value"
+A value to order filters by, ascending. Conflicts with
+.B handle
+which serves the same purpose.
+.TP
+.BI sample " SELECTOR"
+Used together with
+.B ht
+to specify which bucket to add this filter to. This allows one to avoid having
+to know how exactly the kernel calculates hashes. The additional
+.B divisor
+defaults to 256, so must be given for hash tables of different size.
+.TP
+.BI link " HANDLE"
+Delegate matching packets to filters in a hash table.
+.I HANDLE
+is used to only specify the hash table, so only
+.BR htid " may be given, " hash " and " nodeid
+have to be omitted. By default, bucket number 0 will be used and can be
+overridden by the
+.B hashkey
+option.
+.TP
+.BI indev " ifname"
+Filter on the incoming interface of the packet. Obviously works only for
+forwarded traffic.
+.TP
+.BI help
+Print a brief help text about possible options.
+.SH SELECTORS
+Basically the only real selector is
+.B u32 .
+All others merely provide a higher level syntax and are internally translated
+into
+.B u32 .
+.TP
+.BI u32 " VAL_MASK_32"
+.TQ
+.BI u16 " VAL_MASK_16"
+.TQ
+.BI u8 " VAL_MASK_8"
+Match packet data to a given value. The selector name defines the sample length
+to extract (32bits for
+.BR u32 ,
+16bits for
+.B u16
+and 8bits for
+.BR u8 ).
+Before comparing, the sample is binary AND'ed with the given mask. This way
+uninteresting bits can be cleared before comparison. The position of the sample
+is defined by the offset specified in
+.IR AT .
+.TP
+.BI ip " IP"
+.TQ
+.BI ip6 " IP6"
+Assume packet starts with an IPv4 (
+.BR ip )
+or IPv6 (
+.BR ip6 )
+header.
+.IR IP / IP6
+then allows to match various header fields:
+.RS
+.TP
+.BI src " ADDR"
+.BI dst " ADDR"
+Compare Source or Destination Address fields against the value of
+.IR ADDR .
+The reserved words
+.BR default ", " any " and " all
+effectively match any address. Otherwise an IP address of the particular
+protocol is expected, optionally suffixed by a prefix length to match whole
+subnets. In case of IPv4 a netmask may also be given.
+.TP
+.BI dsfield " VAL_MASK_8"
+IPv4 only. Match the packet header's DSCP/ECN field. Synonyms to this are
+.BR tos " and " precedence .
+.TP
+.BI ihl " VAL_MASK_8"
+IPv4 only. Match the Internet Header Length field. Note that the value's unit is
+32bits, so to match a packet with 24byte header length
+.I u8_value
+has to be 6.
+.TP
+.BI protocol " VAL_MASK_8"
+Match the Protocol (IPv4) or Next Header (IPv6) field value, e.g. 6 for TCP.
+.TP
+.BI icmp_type " VAL_MASK_8"
+.TQ
+.BI icmp_code " VAL_MASK_8"
+Assume a next-header protocol of icmp or ipv6-icmp and match Type or Code
+field values. This is dangerous, as the code assumes minimal header size for
+IPv4 and lack of extension headers for IPv6.
+.TP
+.BI sport " VAL_MASK_16"
+.TQ
+.BI dport " VAL_MASK_16"
+Match layer four source or destination ports. This is dangerous as well, as it
+assumes a suitable layer four protocol is present (which has Source and
+Destination Port fields right at the start of the header and 16bit in size).
+Also minimal header size for IPv4 and lack of IPv6 extension headers is assumed.
+.TP
+.B nofrag
+.TQ
+.B firstfrag
+.TQ
+.B df
+.TQ
+.B mf
+IPv4 only, check certain flags and fragment offset values. Match if the packet
+is not a fragment
+.RB ( nofrag ),
+the first fragment
+.RB ( firstfrag ),
+if Don't Fragment
+.RB ( df )
+or More Fragments
+.RB ( mf )
+bits are set.
+.TP
+.BI priority " VAL_MASK_8"
+IPv6 only. Match the header's Traffic Class field, which has the same purpose
+and semantics of IPv4's ToS field since RFC 3168: upper six bits are DSCP, the
+lower two ECN.
+.TP
+.BI flowlabel " VAL_MASK_32"
+IPv6 only. Match the Flow Label field's value. Note that Flow Label itself is
+only 20bytes long, which are the least significant ones here. The remaining
+upper 12bytes match Version and Traffic Class fields.
+.RE
+.TP
+.BI tcp " TCPUDP"
+.TQ
+.BI udp " TCPUDP"
+Match fields of next header of protocol TCP or UDP. The possible values for
+.I TCPDUP
+are:
+.RS
+.TP
+.BI src " VAL_MASK_16"
+Match on Source Port field value.
+.TP
+.BI dst " VALMASK_16"
+Match on Destination Port field value.
+.RE
+.TP
+.BI icmp " ICMP"
+Match fields of next header of protocol ICMP. The possible values for
+.I ICMP
+are:
+.RS
+.TP
+.BI type " VAL_MASK_8"
+Match on ICMP Type field.
+.TP
+.BI code " VAL_MASK_8"
+Match on ICMP Code field.
+.RE
+.TP
+.BI mark " VAL_MASK_32"
+Match on netfilter fwmark value.
+.TP
+.BI ether " ETHER"
+Match on ethernet header fields. Possible values for
+.I ETHER
+are:
+.RS
+.TP
+.BI src " ether_address" " " AT
+.TQ
+.BI dst " ether_address" " " AT
+Match on source or destination ethernet address. This is dangerous: It assumes
+an ethernet header is present at the start of the packet. This will probably
+lead to unexpected things if used with layer three interfaces like e.g. tun or
+ppp.
+.SH EXAMPLES
+.RS
+.EX
+tc filter add dev eth0 parent 999:0 prio 99 protocol ip u32 \\
+        match ip src 192.168.8.0/24 classid 1:1
+.EE
+.RE
+
+This attaches a filter to the qdisc identified by
+.BR 999:0.
+It's priority is
+.BR 99 ,
+which affects in which order multiple filters attached to the same
+.B parent
+are consulted (the lower the earlier). The filter handles packets of
+.B protocol
+type
+.BR ip ,
+and
+.BR match es
+if the IP header's source address is within the
+.B 192.168.8.0/24
+subnet. Matching packets are classified into class
+.BR 1.1 .
+The effect of this command might be surprising at first glance:
+
+.RS
+.EX
+filter parent 1: protocol ip pref 99 u32
+filter parent 1: protocol ip pref 99 u32 \\
+        fh 800: ht divisor 1
+filter parent 1: protocol ip pref 99 u32 \\
+        fh 800::800 order 2048 key ht 800 bkt 0 flowid 1:1 \\
+        match c0a80800/ffffff00 at 12
+.EE
+.RE
+
+So parent
+.B 1:
+is assigned a new
+.B u32
+filter, which contains a hash table of size 1 (as the
+.B divisor
+indicates). The table ID is
+.BR 800 .
+The third line then shows the actual filter which was added above: it sits in
+table
+.B 800
+and bucket
+.BR 0 ,
+classifies packets into class ID
+.B 1:1
+and matches the upper three bytes of the four byte value at offset
+.B 12
+to be
+.BR 0xc0a808 ,
+which is 192, 168 and 8.
+
+Now for something more complicated, namely creating a custom hash table:
+
+.RS
+.EX
+tc filter add dev eth0 prio 99 handle 1: u32 divisor 256
+.EE
+.RE
+
+This creates a table of size 256 with handle
+.B 1:
+in priority
+.BR 99 .
+The effect is as follows:
+
+.RS
+.EX
+filter parent 1: protocol all pref 99 u32
+filter parent 1: protocol all pref 99 u32 fh 1: ht divisor 256
+filter parent 1: protocol all pref 99 u32 fh 800: ht divisor 1
+.EE
+.RE
+
+So along with the requested hash table (handle
+.BR 1: ),
+the kernel has created his own table of size 1 to hold other filters of the same
+priority.
+
+The next step is to create a filter which links to the created hash table:
+
+.RS
+.EX
+tc filter add dev eth0 parent 1: prio 1 u32 \\
+        link 1: hashkey mask 0x0000ff00 at 12 \\
+        match ip src 192.168.0.0/16
+.EE
+.RE
+
+The filter is given a lower priority than the hash table itself so
+.B u32
+consults it before manually traversing the hash table. The options
+.BR link " and " hashkey
+determine which table and bucket to redirect to. In this case the hash key
+should be constructed out of the second byte at offset 12, which corresponds to
+an IP packet's third byte of the source address field. Along with the
+.B match
+statement, this effectively maps all class C networks below 192.168.0.0/16 to
+different buckets of the hash table.
+
+Filters for certain subnets can be created like so:
+
+.RS
+.EX
+tc filter add dev eth0 parent 1: prio 99 u32 \\
+        ht 1: sample u32 0x00000800 0x0000ff00 at 12 \\
+        match ip src 192.168.8.0/24 classid 1:1
+.EE
+.RE
+
+The bucket is defined using the
+.B sample
+option: In this case, the second byte at offset 12 must be 0x08, exactly. In
+this case, the resulting bucket ID is obviously 8, but as soon as
+.B sample
+selects an amount of data which could exceed the
+.BR divisor ,
+one would have to know the kernel-internal algorithm to deduce the destination
+bucket. This filter's
+.B match
+statement is redundant in this case, as the entropy for the hash key does not
+exceed the table size and therefore no collisions can occur. Otherwise it's
+necessary to prevent matching unwanted packets.
+
+Matching upper layer fields is problematic since IPv4 header length is variable
+and IPv6 supports extension headers which affect upper layer header offset. To
+overcome this, there is the possibility to specify
+.B nexthdr+
+when giving an offset, and to make things easier there are the
+.BR tcp " and " udp
+matches which use
+.B nexthdr+
+implicitly. This offset has to be calculated in beforehand though, and the only
+way to achieve that is by doing it in a separate filter which then links to the
+filter which wants to use it. Here is an example of doing so:
+
+.RS
+.EX
+tc filter add dev eth0 parent 1:0 protocol ip handle 1: \\
+        u32 divisor 1
+tc filter add dev eth0 parent 1:0 protocol ip \\
+        u32 ht 1: \\
+        match tcp src 22 FFFF \\
+        classid 1:2
+tc filter add dev eth0 parent 1:0 protocol ip \\
+        u32 ht 800: \\
+        match ip protocol 6 FF \\
+        match ip firstfrag \\
+        offset at 0 mask 0f00 shift 6 \\
+        link 1:
+.EE
+.RE
+
+This is what is being done: In the first call, a single element sized hash table
+is created so there is a place to hold the linked to filter and a known handle
+.RB ( 1: )
+to reference to it. The second call then adds the actual filter, which pushes
+packets with TCP source port 22 into class
+.BR 1:2 .
+Using
+.BR ht ,
+it is moved into the hash table created by the first call. The third call then
+does the actual magic: It matches IPv4 packets with next layer protocol 6 (TCP),
+only if it's the first fragment (usually TCP sets DF bit, but if it doesn't and
+the packet is fragmented, only the first one contains the TCP header), and then
+sets the offset based on the IP header's IHL field (right-shifting by 6
+eliminates the offset of the field and at the same time converts the value into
+byte unit). Finally, using
+.BR link ,
+the hash table from first call is referenced which holds the filter from second
+call.
+.SH SEE ALSO
+.BR tc (8),
+.br
+.BR cls_u32.txt " at " http://linux-tc-notes.sourceforge.net/
diff --git a/man/man8/tc.8 b/man/man8/tc.8
index 2fdd023..08c7de0 100644
--- a/man/man8/tc.8
+++ b/man/man8/tc.8
@@ -24,7 +24,7 @@ class-id ] qdisc
 
 .B tc filter [ add | change | replace ] dev
 DEV
-.B  [ parent
+.B [ parent
 qdisc-id
 .B | root ] protocol
 protocol
@@ -36,9 +36,9 @@ flow-id
 
 .B tc
 .RI "[ " FORMAT " ]"
-.B qdisc show [ dev 
-DEV 
-.B  ]
+.B qdisc show [ dev
+DEV
+.B ]
 .P
 .B tc 
 .RI "[ " FORMAT " ]"
@@ -78,7 +78,7 @@ is also called prioritizing, and happens only on egress.
 
 .TP
 POLICING
-Where shaping deals with transmission of traffic, policing pertains to traffic
+Whereas shaping deals with transmission of traffic, policing pertains to traffic
 arriving. Policing thus occurs on ingress.
 
 .TP
@@ -128,6 +128,44 @@ It is important to notice that filters reside
 .B within
 qdiscs - they are not masters of what happens.
 
+The available filters are:
+.TP
+basic
+Filter packets based on an ematch expression. See
+.BR tc-ematch (8)
+for details.
+.TP
+cgroup
+Filter packets based on the control group of their process. See
+. BR tc-cgroup (8)
+for details.
+.TP
+flow
+Flow-based classifier, filtering packets based on their flow (identified by selectable keys). See
+.BR tc-flow (8)
+for details.
+.TP
+fw
+Filter based on fwmark. Directly maps fwmark value to traffic class. See
+.BR tc-fw (8).
+.TP
+route
+Filter packets based on routing table. See
+.BR tc-route (8)
+for details.
+.TP
+rsvp
+Match Resource Reservation Protocol (RSVP) packets.
+.TP
+tcindex
+Filter packets based on traffic control index. See
+.BR tc-index (8).
+.TP
+u32
+Generic filtering on arbitrary packet data, assisted by syntax to abstract common operations. See
+.BR tc-u32 (8)
+for details.
+
 .SH CLASSLESS QDISCS
 The classless qdiscs are:
 .TP 
@@ -204,10 +242,10 @@ subclasses to which traffic may be enqueued.
 
 Furthermore, each class contains a
 .B leaf qdisc
-which by default has 
-.B pfifo 
-behaviour though another qdisc can be attached in place. This qdisc may again 
-contain classes, but each class can have only one leaf qdisc. 
+which by default has
+.B pfifo
+behaviour, although another qdisc can be attached in place. This qdisc may again
+contain classes, but each class can have only one leaf qdisc.
 
 When a packet enters a classful qdisc it can be 
 .B classified
@@ -237,6 +275,9 @@ All qdiscs, classes and filters have IDs, which can either be specified
 or be automatically assigned. 
 
 IDs consist of a major number and a minor number, separated by a colon.
+Both major and minor number are limited to 16 bits. There are two special
+values: root is signified by major and minor of all ones, and unspecified
+is all zeros.
 
 .TP 
 QDISCS
@@ -384,14 +425,23 @@ and a new line on standard output after each successfully interpreted command.
 .B tc
 was written by Alexey N. Kuznetsov and added in Linux 2.2.
 .SH SEE ALSO
+.BR tc-basic (8),
+.BR tc-bfifo (8),
 .BR tc-cbq (8),
+.BR tc-cgroup (8),
+.BR tc-drr (8),
+.BR tc-ematch (8),
+.BR tc-flow (8),
+.BR tc-fw (8),
 .BR tc-htb (8),
-.BR tc-sfq (8),
-.BR tc-red (8),
-.BR tc-tbf (8),
 .BR tc-pfifo (8),
-.BR tc-bfifo (8),
 .BR tc-pfifo_fast (8),
+.BR tc-red (8),
+.BR tc-route (8),
+.BR tc-sfq (8),
+.BR tc-tbf (8),
+.BR tc-tcindex (8),
+.BR tc-u32 (8),
 .br
 .RB "User documentation at " http://lartc.org/ ", but please direct bugreports and patches to: " <netdev@vger.kernel.org>
 
diff --git a/tc/f_route.c b/tc/f_route.c
index 67dd49c..a7c505e 100644
--- a/tc/f_route.c
+++ b/tc/f_route.c
@@ -28,7 +28,7 @@
 static void explain(void)
 {
 	fprintf(stderr, "Usage: ... route [ from REALM | fromif TAG ] [ to REALM ]\n");
-	fprintf(stderr, "                [ flowid CLASSID ] [ police POLICE_SPEC ]\n");
+	fprintf(stderr, "                [ classid CLASSID ] [ police ACTION_SPEC ]\n");
 	fprintf(stderr, "       POLICE_SPEC := ... look at TBF\n");
 	fprintf(stderr, "       CLASSID := X:Y\n");
 	fprintf(stderr, "\nNOTE: CLASSID is parsed as hexadecimal input.\n");
diff --git a/tc/f_rsvp.c b/tc/f_rsvp.c
index 7e1e6d9..9bc4fc8 100644
--- a/tc/f_rsvp.c
+++ b/tc/f_rsvp.c
@@ -27,7 +27,7 @@
 static void explain(void)
 {
 	fprintf(stderr, "Usage: ... rsvp ipproto PROTOCOL session DST[/PORT | GPI ]\n");
-	fprintf(stderr, "                [ sender SRC[/PORT | GPI ]\n");
+	fprintf(stderr, "                [ sender SRC[/PORT | GPI ] ]\n");
 	fprintf(stderr, "                [ classid CLASSID ] [ police POLICE_SPEC ]\n");
 	fprintf(stderr, "                [ tunnelid ID ] [ tunnel ID skip NUMBER ]\n");
 	fprintf(stderr, "Where: GPI := { flowlabel NUMBER | spi/ah SPI | spi/esp SPI |\n");
-- 
1.8.3.1

