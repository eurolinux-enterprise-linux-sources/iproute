From 888d20ea1ea2956704b5c7becdad648658aec270 Mon Sep 17 00:00:00 2001
From: Phil Sutter <psutter@redhat.com>
Date: Wed, 22 Nov 2017 12:21:22 +0100
Subject: [RHEL6.10 net 1/1] ss: avoid passing negative numbers to malloc

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1476664
Upstream Status: iproute2.git commit 2a4fa1c305742

commit 2a4fa1c305742e4bfbc2960c40e0d1ee55b30694
Author: Andreas Henriksson <andreas@fatal.se>
Date:   Wed Nov 13 09:46:42 2013 +0100

    ss: avoid passing negative numbers to malloc

    Example:

    $ ss state established \( sport = :4060  or sport = :4061 or sport = :4062  or sport = :4063 or sport = :4064  or sport = :4065 or sport = :4066  or sport = :4067 \)  > /dev/null
    Aborted

    In the example above ssfilter_bytecompile(...) will return (int)136.
    char l1 = 136; means -120 which will result in a negative number
    being passed to malloc at misc/ss.c:913.

    Simply declare l1 and l2 as integers to avoid the char overflow.

    This is one of the issues originally reported in http://bugs.debian.org/511720

    Fix the same problem in other code paths as well (thanks to Eric Dumazet).

    Reported-by: Andreas Schuldei <andreas@debian.org>
    Signed-off-by: Andreas Henriksson <andreas@fatal.se>
    Reviewed-by: Eric Dumazet <edumazet@google.com>

Signed-off-by: Phil Sutter <psutter@redhat.com>
---
 misc/ss.c | 9 ++++++---
 1 file changed, 6 insertions(+), 3 deletions(-)

diff --git a/misc/ss.c b/misc/ss.c
index 3a4083b3104c5..1f14249c64d76 100644
--- a/misc/ss.c
+++ b/misc/ss.c
@@ -830,7 +830,8 @@ static int ssfilter_bytecompile(struct ssfilter *f, char **bytecode)
 
 		case SSF_AND:
 	{
-		char *a1, *a2, *a, l1, l2;
+		char *a1, *a2, *a;
+		int l1, l2;
 		l1 = ssfilter_bytecompile(f->pred, &a1);
 		l2 = ssfilter_bytecompile(f->post, &a2);
 		if (!(a = malloc(l1+l2))) abort();
@@ -843,7 +844,8 @@ static int ssfilter_bytecompile(struct ssfilter *f, char **bytecode)
 	}
 		case SSF_OR:
 	{
-		char *a1, *a2, *a, l1, l2;
+		char *a1, *a2, *a;
+		int l1, l2;
 		l1 = ssfilter_bytecompile(f->pred, &a1);
 		l2 = ssfilter_bytecompile(f->post, &a2);
 		if (!(a = malloc(l1+l2+4))) abort();
@@ -856,7 +858,8 @@ static int ssfilter_bytecompile(struct ssfilter *f, char **bytecode)
 	}
 		case SSF_NOT:
 	{
-		char *a1, *a, l1;
+		char *a1, *a;
+		int l1;
 		l1 = ssfilter_bytecompile(f->pred, &a1);
 		if (!(a = malloc(l1+4))) abort();
 		memcpy(a, a1, l1);
-- 
2.13.1

