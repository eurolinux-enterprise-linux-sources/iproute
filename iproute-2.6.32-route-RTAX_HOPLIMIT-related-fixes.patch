From 8b8311932a9f900d350028ec08326186a6dece2d Mon Sep 17 00:00:00 2001
From: Phil Sutter <psutter@redhat.com>
Date: Thu, 1 Oct 2015 12:01:46 +0200
Subject: [PATCH] route: RTAX_HOPLIMIT related fixes

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1199867
Conflicts:
 * Missing commit 6ef87f9cce213 ("ip: route: add congestion control metric")

This is a combination of 3 commits:

commit 62011a0b31009a16518e0b17ba7205349a4b2a72
Author: Ulrich Weber <uweber@astaro.com>
Date:   Fri Jul 23 15:39:10 2010 +0200

    iproute2: use int instead of long for RTAX_HOPLIMIT compare

    otherwise "if ((int)val == -1)" will never match on 64 bit systems

    Signed-off-by: Ulrich Weber <uweber@astaro.com>

commit ea6cbab792f7bb8813f1b24cc1f4bd4caad8ccbe
Author: Phil Sutter <phil@nwl.cc>
Date:   Tue Nov 24 15:45:31 2015 +0100

    iproute: restrict hoplimit values to be in range [0; 255]

    Technically, the range of possible hoplimit values are defined by IPv4
    and IPv6 header formats. Both define the field to be eight bits in size,
    which leads to a value range of [0;255]. Setting a packet's hoplimit
    field to 0 though makes not much sense, as the next hop would
    immediately drop the packet. Therefore Linux uses 0 as a special value
    indicating to use the system's default hoplimit (configurable via
    sysctl). In iproute, setting the hoplimit of a route to 0 is equivalent
    to omitting the hoplimit parameter alltogether, so it is actually not
    necessary to allow that value to be specified, but keep it anyway for
    backwards compatibility.

    Signed-off-by: Phil Sutter <phil@nwl.cc>

commit 0f7543322c5fd64d70672578979cf74226f54b64
Author: Phil Sutter <phil@nwl.cc>
Date:   Wed Dec 2 13:50:22 2015 +0100

    route: ignore RTAX_HOPLIMIT of value -1

    Older kernels use -1 internally as indicator to use the sysctl default,
    but they still export the setting. Newer kernels use 0 to indicate that
    (which is why the conversion from -1 to 0 was done here), but they also
    stopped exporting the value. Since the meaning of -1 is clear, treat it
    equally like default on newer kernels (which is to not print anything).

    Signed-off-by: Phil Sutter <phil@nwl.cc>

Signed-off-by: Phil Sutter <psutter@redhat.com>
---
 ip/iproute.c | 12 ++++++------
 1 file changed, 6 insertions(+), 6 deletions(-)

diff --git a/ip/iproute.c b/ip/iproute.c
index 7cbaa169ab81a..8a0f4c15484d6 100644
--- a/ip/iproute.c
+++ b/ip/iproute.c
@@ -494,6 +494,11 @@ int print_route(const struct sockaddr_nl *who, struct nlmsghdr *n, void *arg)
 			if (mxrta[i] == NULL)
 				continue;
 
+			val = *(unsigned*)RTA_DATA(mxrta[i]);
+
+			if (i == RTAX_HOPLIMIT && (int)val == -1)
+				continue;
+
 			if (i < sizeof(mx_names)/sizeof(char*) && mx_names[i])
 				fprintf(fp, " %s", mx_names[i]);
 			else
@@ -501,12 +506,7 @@ int print_route(const struct sockaddr_nl *who, struct nlmsghdr *n, void *arg)
 			if (mxlock & (1<<i))
 				fprintf(fp, " lock");
 
-			val = *(unsigned*)RTA_DATA(mxrta[i]);
 			switch (i) {
-			case RTAX_HOPLIMIT:
-				if ((long)val == -1)
-					val = 0;
-				/* fall through */
 			default:
 				fprintf(fp, " %u", val);
 				break;
@@ -771,7 +771,7 @@ int iproute_modify(int cmd, unsigned flags, int argc, char **argv)
 				mxlock |= (1<<RTAX_HOPLIMIT);
 				NEXT_ARG();
 			}
-			if (get_unsigned(&hoplimit, *argv, 0))
+			if (get_unsigned(&hoplimit, *argv, 0) || hoplimit > 255)
 				invarg("\"hoplimit\" value is invalid\n", *argv);
 			rta_addattr32(mxrta, sizeof(mxbuf), RTAX_HOPLIMIT, hoplimit);
 #endif
-- 
2.6.4

