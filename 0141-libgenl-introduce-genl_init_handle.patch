From 734c47bbe6a885923d52be91e8aaddfccaa182f5 Mon Sep 17 00:00:00 2001
From: Timothy Redaelli <tredaelli@redhat.com>
Date: Fri, 10 Feb 2017 12:51:08 +0100
Subject: [PATCH] libgenl: introduce genl_init_handle

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1367071
Upstream Status: iproute2.git commit 2b68cb7
Conflicts: ip/ipfou.c and ip/ipila.c files doesn't exists in our tree

commit 2b68cb77cde32f5cba5f984e15fc402758edea76
Author: Sabrina Dubroca <sd@queasysnail.net>
Date:   Tue Aug 16 16:26:55 2016 +0200

    libgenl: introduce genl_init_handle

    All users of genl have the same code to open a genl socket and resolve
    the family for their specific protocol.  Introduce a helper to initialize
    the handle, and use it in all the genl code.

    Signed-off-by: Sabrina Dubroca <sd@queasysnail.net>

Signed-off-by: Timothy Redaelli <tredaelli@redhat.com>
---
 include/libgenl.h |  2 ++
 ip/ipl2tp.c       | 12 ++----------
 ip/ipmacsec.c     | 18 ++----------------
 ip/tcp_metrics.c  | 14 +++-----------
 lib/libgenl.c     | 17 +++++++++++++++++
 5 files changed, 26 insertions(+), 37 deletions(-)

diff --git a/include/libgenl.h b/include/libgenl.h
index 9db4baf..2dbb4b3 100644
--- a/include/libgenl.h
+++ b/include/libgenl.h
@@ -21,5 +21,7 @@ struct {								\
 }
 
 extern int genl_resolve_family(struct rtnl_handle *grth, const char *family);
+extern int genl_init_handle(struct rtnl_handle *grth, const char *family,
+			    int *genl_family);
 
 #endif /* __LIBGENL_H__ */
diff --git a/ip/ipl2tp.c b/ip/ipl2tp.c
index d2c8979..ced4a8b 100644
--- a/ip/ipl2tp.c
+++ b/ip/ipl2tp.c
@@ -711,16 +711,8 @@ int do_ipl2tp(int argc, char **argv)
 	if (argc < 1 || !matches(*argv, "help"))
 		usage();
 
-	if (genl_family < 0) {
-		if (rtnl_open_byproto(&genl_rth, 0, NETLINK_GENERIC) < 0) {
-			fprintf(stderr, "Cannot open generic netlink socket\n");
-			exit(1);
-		}
-
-		genl_family = genl_resolve_family(&genl_rth, L2TP_GENL_NAME);
-		if (genl_family < 0)
-			exit(1);
-	}
+	if (genl_init_handle(&genl_rth, L2TP_GENL_NAME, &genl_family))
+		exit(1);
 
 	if (matches(*argv, "add") == 0)
 		return do_add(argc-1, argv+1);
diff --git a/ip/ipmacsec.c b/ip/ipmacsec.c
index 0c51bfc..f05b27a 100644
--- a/ip/ipmacsec.c
+++ b/ip/ipmacsec.c
@@ -79,21 +79,6 @@ static int genl_family = -1;
 		     _cmd, _flags)
 
 
-static void init_genl(void)
-{
-	if (genl_family >= 0)
-		return;
-
-	if (rtnl_open_byproto(&genl_rth, 0, NETLINK_GENERIC) < 0) {
-		fprintf(stderr, "Cannot open generic netlink socket\n");
-		exit(1);
-	}
-
-	genl_family = genl_resolve_family(&genl_rth, MACSEC_GENL_NAME);
-	if (genl_family < 0)
-		exit(1);
-}
-
 static void ipmacsec_usage(void)
 {
 	fprintf(stderr, "Usage: ip macsec add DEV tx sa { 0..3 } [ OPTS ] key ID KEY\n");
@@ -1001,7 +986,8 @@ static int do_show(int argc, char **argv)
 
 int do_ipmacsec(int argc, char **argv)
 {
-	init_genl();
+	if (genl_init_handle(&genl_rth, MACSEC_GENL_NAME, &genl_family))
+		exit(1);
 
 	if (argc < 1)
 		ipmacsec_usage();
diff --git a/ip/tcp_metrics.c b/ip/tcp_metrics.c
index c55d9ad..b055288 100644
--- a/ip/tcp_metrics.c
+++ b/ip/tcp_metrics.c
@@ -320,17 +320,9 @@ static int tcpm_do_cmd(int cmd, int argc, char **argv)
 		ack = 0;
 	}
 
-	if (genl_family < 0) {
-		if (rtnl_open_byproto(&grth, 0, NETLINK_GENERIC) < 0) {
-			fprintf(stderr, "Cannot open generic netlink socket\n");
-			exit(1);
-		}
-		genl_family = genl_resolve_family(&grth,
-						  TCP_METRICS_GENL_NAME);
-		if (genl_family < 0)
-			exit(1);
-		req.n.nlmsg_type = genl_family;
-	}
+	if (genl_init_handle(&grth, TCP_METRICS_GENL_NAME, &genl_family))
+		exit(1);
+	req.n.nlmsg_type = genl_family;
 
 	if (!(cmd & CMD_FLUSH) && (atype >= 0 || (cmd & CMD_DEL))) {
 		if (ack)
diff --git a/lib/libgenl.c b/lib/libgenl.c
index acb1478..50d2d92 100644
--- a/lib/libgenl.c
+++ b/lib/libgenl.c
@@ -61,3 +61,20 @@ int genl_resolve_family(struct rtnl_handle *grth, const char *family)
 	return genl_parse_getfamily(&req.n);
 }
 
+int genl_init_handle(struct rtnl_handle *grth, const char *family,
+		     int *genl_family)
+{
+	if (*genl_family >= 0)
+		return 0;
+
+	if (rtnl_open_byproto(grth, 0, NETLINK_GENERIC) < 0) {
+		fprintf(stderr, "Cannot open generic netlink socket\n");
+		return -1;
+	}
+
+	*genl_family = genl_resolve_family(grth, family);
+	if (*genl_family < 0)
+		return -1;
+
+	return 0;
+}
-- 
1.8.3.1

