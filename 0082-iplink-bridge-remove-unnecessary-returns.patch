From 7ddb2ef80b5e6cb2ec411dc5721d574d9bec1ff8 Mon Sep 17 00:00:00 2001
From: Phil Sutter <psutter@redhat.com>
Date: Tue, 28 Feb 2017 16:12:21 +0100
Subject: [PATCH] iplink: bridge: remove unnecessary returns

Bugzilla: https://bugzilla.redhat.com/show_bug.cgi?id=1417289
Upstream Status: iproute2.git commit 8a4cd3943fb84
Conflicts: Dropped some chunks due to missing nf_call_* support.

commit 8a4cd3943fb8498a108f0d494bb3176deb01ab0f
Author: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
Date:   Thu Feb 18 20:54:34 2016 +0100

    iplink: bridge: remove unnecessary returns

    invarg exits so no need to return, remove this c&p error from my recent
    patches

    Signed-off-by: Nikolay Aleksandrov <nikolay@cumulusnetworks.com>
---
 ip/iplink_bridge.c | 35 ++++++++++++++---------------------
 1 file changed, 14 insertions(+), 21 deletions(-)

diff --git a/ip/iplink_bridge.c b/ip/iplink_bridge.c
index 7cec078..6a0acf7 100644
--- a/ip/iplink_bridge.c
+++ b/ip/iplink_bridge.c
@@ -119,19 +119,17 @@ static int bridge_parse_opt(struct link_util *lu, int argc, char **argv,
 			__u8 vlan_filter;
 
 			NEXT_ARG();
-			if (get_u8(&vlan_filter, *argv, 0)) {
+			if (get_u8(&vlan_filter, *argv, 0))
 				invarg("invalid vlan_filtering", *argv);
-				return -1;
-			}
+
 			addattr8(n, 1024, IFLA_BR_VLAN_FILTERING, vlan_filter);
 		} else if (matches(*argv, "vlan_protocol") == 0) {
 			__u16 vlan_proto;
 
 			NEXT_ARG();
-			if (ll_proto_a2n(&vlan_proto, *argv)) {
+			if (ll_proto_a2n(&vlan_proto, *argv))
 				invarg("invalid vlan_protocol", *argv);
-				return -1;
-			}
+
 			addattr16(n, 1024, IFLA_BR_VLAN_PROTOCOL, vlan_proto);
 		} else if (matches(*argv, "group_fwd_mask") == 0) {
 			__u16 fwd_mask;
@@ -246,55 +244,50 @@ static int bridge_parse_opt(struct link_util *lu, int argc, char **argv,
 			__u64 mcast_membership_intvl;
 
 			NEXT_ARG();
-			if (get_u64(&mcast_membership_intvl, *argv, 0)) {
+			if (get_u64(&mcast_membership_intvl, *argv, 0))
 				invarg("invalid mcast_membership_interval",
 				       *argv);
-				return -1;
-			}
+
 			addattr64(n, 1024, IFLA_BR_MCAST_MEMBERSHIP_INTVL,
 				  mcast_membership_intvl);
 		} else if (matches(*argv, "mcast_querier_interval") == 0) {
 			__u64 mcast_querier_intvl;
 
 			NEXT_ARG();
-			if (get_u64(&mcast_querier_intvl, *argv, 0)) {
+			if (get_u64(&mcast_querier_intvl, *argv, 0))
 				invarg("invalid mcast_querier_interval",
 				       *argv);
-				return -1;
-			}
+
 			addattr64(n, 1024, IFLA_BR_MCAST_QUERIER_INTVL,
 				  mcast_querier_intvl);
 		} else if (matches(*argv, "mcast_query_interval") == 0) {
 			__u64 mcast_query_intvl;
 
 			NEXT_ARG();
-			if (get_u64(&mcast_query_intvl, *argv, 0)) {
+			if (get_u64(&mcast_query_intvl, *argv, 0))
 				invarg("invalid mcast_query_interval",
 				       *argv);
-				return -1;
-			}
+
 			addattr64(n, 1024, IFLA_BR_MCAST_QUERY_INTVL,
 				  mcast_query_intvl);
 		} else if (!matches(*argv, "mcast_query_response_interval")) {
 			__u64 mcast_query_resp_intvl;
 
 			NEXT_ARG();
-			if (get_u64(&mcast_query_resp_intvl, *argv, 0)) {
+			if (get_u64(&mcast_query_resp_intvl, *argv, 0))
 				invarg("invalid mcast_query_response_interval",
 				       *argv);
-				return -1;
-			}
+
 			addattr64(n, 1024, IFLA_BR_MCAST_QUERY_RESPONSE_INTVL,
 				  mcast_query_resp_intvl);
 		} else if (!matches(*argv, "mcast_startup_query_interval")) {
 			__u64 mcast_startup_query_intvl;
 
 			NEXT_ARG();
-			if (get_u64(&mcast_startup_query_intvl, *argv, 0)) {
+			if (get_u64(&mcast_startup_query_intvl, *argv, 0))
 				invarg("invalid mcast_startup_query_interval",
 				       *argv);
-				return -1;
-			}
+
 			addattr64(n, 1024, IFLA_BR_MCAST_STARTUP_QUERY_INTVL,
 				  mcast_startup_query_intvl);
 		} else if (matches(*argv, "help") == 0) {
-- 
1.8.3.1

